Name : Bhumur Agrawal
PRN : 250240120047



-------------------------------------------- Restricting and Sorting Data-------------------------------------------



The HR department needs your assistance in creating some queries.



1.	Because of budget issues, the HR department needs a report that displays the last name and salary of employees earning more than $12,000.

select last_name ,salary from employees salary>12000;

mysql> select last_name ,salary from employees where salary>12000;
+-----------+----------+
| last_name | salary   |
+-----------+----------+
| King      | 24000.00 |
| Kochhar   | 17000.00 |
| De Haan   | 17000.00 |
| Russell   | 14000.00 |
| Partners  | 13500.00 |
| Hartstein | 13000.00 |
+-----------+----------+
6 rows in set (0.00 sec)




2.	Open a new SQL Worksheet. Create a report that displays the last name and department number for employee number 176.

select last_name, department_id from employees where employee_id = 176;

mysql> select last_name, department_id from employees where employee_id = 176;
+-----------+---------------+
| last_name | department_id |
+-----------+---------------+
| Taylor    |            80 |
+-----------+---------------+
1 row in set (0.00 sec)


3.	The HR department needs to find high-salary and low-salary employees. Modify lab_03_01.sql to display the last name and salary for all employees whose salary is not in the range $5,000 through $12,000.

select * from employees where salary in (select max(salary) from employees);
select * from employees where salary in (select min(salary) from employees);

select first_name, salary from employees where salary not between 5000 and 12000;


mysql> select first_name, salary from employees where salary in (select max(salary) from employees);
+------------+----------+
| first_name | salary   |
+------------+----------+
| Steven     | 24000.00 |
+------------+----------+
1 row in set (0.00 sec)

mysql> select first_name, salary from employees where salary in (select min(salary) from employees);
+------------+---------+
| first_name | salary  |
+------------+---------+
| TJ         | 2100.00 |
+------------+---------+
1 row in set (0.00 sec)

mysql> select last_name, salary from employees where salary not between 5000 and 12000;
+-------------+----------+
| last_name   | salary   |
+-------------+----------+
| King        | 24000.00 |
| Kochhar     | 17000.00 |
| De Haan     | 17000.00 |
| Austin      |  4800.00 |
| Pataballa   |  4800.00 |
| Lorentz     |  4200.00 |
| Khoo        |  3100.00 |
| Baida       |  2900.00 |
| Tobias      |  2800.00 |
| Himuro      |  2600.00 |
| Colmenares  |  2500.00 |
| Nayer       |  3200.00 |
| Mikkilineni |  2700.00 |
| Landry      |  2400.00 |
| Markle      |  2200.00 |
| Bissot      |  3300.00 |
| Atkinson    |  2800.00 |
| Marlow      |  2500.00 |
| Olson       |  2100.00 |
| Mallin      |  3300.00 |
| Rogers      |  2900.00 |
| Gee         |  2400.00 |
| Philtanker  |  2200.00 |
| Ladwig      |  3600.00 |
| Stiles      |  3200.00 |
| Seo         |  2700.00 |
| Patel       |  2500.00 |
| Rajs        |  3500.00 |
| Davies      |  3100.00 |
| Matos       |  2600.00 |
| Vargas      |  2500.00 |
| Russell     | 14000.00 |
| Partners    | 13500.00 |
| Taylor      |  3200.00 |
| Fleaur      |  3100.00 |
| Sullivan    |  2500.00 |
| Geoni       |  2800.00 |
| Sarchand    |  4200.00 |
| Bull        |  4100.00 |
| Dellinger   |  3400.00 |
| Cabrio      |  3000.00 |
| Chung       |  3800.00 |
| Dilly       |  3600.00 |
| Gates       |  2900.00 |
| Perkins     |  2500.00 |
| Bell        |  4000.00 |
| Everett     |  3900.00 |
| McCain      |  3200.00 |
| Jones       |  2800.00 |
| Walsh       |  3100.00 |
| Feeney      |  3000.00 |
| OConnell    |  2600.00 |
| Grant       |  2600.00 |
| Whalen      |  4400.00 |
| Hartstein   | 13000.00 |
+-------------+----------+
55 rows in set (0.00 sec)

4.	Modify above query  to list the last name and salary of employees who earn between
	$5,000 and $12,000, and are in department 20 or 50. Label the columns Employee and Monthly Salary, respectively.
	
mysql> select last_name"Employee", salary"Monthly Salary" from employees where (salary between 5000 and 12000) and department_id in (20,50);
+----------+----------------+
| Employee | Monthly Salary |
+----------+----------------+
| Weiss    |        8000.00 |
| Fripp    |        8200.00 |
| Kaufling |        7900.00 |
| Vollman  |        6500.00 |
| Mourgos  |        5800.00 |
| Fay      |        6000.00 |
+----------+----------------+
6 rows in set (0.00 sec)
	
	
	
6.	Modify lab_03_03.sql to list the last name and salary of employees who earn between
	$5,000 and $12,000, and are in department 20 or 50. Label the columns Employee and Monthly Salary, respectively.
	
mysql> select last_name"Employee", salary"Monthly Salary" from employees where (salary between 5000 and 12000) and department_id in (20,50);
+----------+----------------+
| Employee | Monthly Salary |
+----------+----------------+
| Weiss    |        8000.00 |
| Fripp    |        8200.00 |
| Kaufling |        7900.00 |
| Vollman  |        6500.00 |
| Mourgos  |        5800.00 |
| Fay      |        6000.00 |
+----------+----------------+
6 rows in set (0.00 sec)
	
	

5.	Create a report to display the last name, job ID, and hire date for employees with the last names of Matos and Taylor. Order the query in ascending order by hire date.

select last_name, job_id, hire_date from employees where last_name in ('Matos', 'Taylor') order by hire_date;

mysql> select last_name, job_id, hire_date from employees where last_name in ('Matos', 'Taylor') order by hire_date;
+-----------+----------+------------+
| last_name | job_id   | hire_date  |
+-----------+----------+------------+
| Taylor    | SH_CLERK | 1998-01-24 |
| Matos     | ST_CLERK | 1998-03-15 |
| Taylor    | SA_REP   | 1998-03-24 |
+-----------+----------+------------+
3 rows in set (0.00 sec)

6.	Display the last name and department ID of all employees in departments 20 or 50 in ascending alphabetical order by last_name.

select last_name, department_id from employees where department_id in (20,50) order by last_name;

mysql> select last_name, department_id from employees where department_id in (20,50) order by last_name;
+-------------+---------------+
| last_name   | department_id |
+-------------+---------------+
| Atkinson    |            50 |
| Bell        |            50 |
| Bissot      |            50 |
| Bull        |            50 |
| Cabrio      |            50 |
| Chung       |            50 |
| Davies      |            50 |
| Dellinger   |            50 |
| Dilly       |            50 |
| Everett     |            50 |
| Fay         |            20 |
| Feeney      |            50 |
| Fleaur      |            50 |
| Fripp       |            50 |
| Gates       |            50 |
| Gee         |            50 |
| Geoni       |            50 |
| Grant       |            50 |
| Hartstein   |            20 |
| Jones       |            50 |
| Kaufling    |            50 |
| Ladwig      |            50 |
| Landry      |            50 |
| Mallin      |            50 |
| Markle      |            50 |
| Marlow      |            50 |
| Matos       |            50 |
| McCain      |            50 |
| Mikkilineni |            50 |
| Mourgos     |            50 |
| Nayer       |            50 |
| OConnell    |            50 |
| Olson       |            50 |
| Patel       |            50 |
| Perkins     |            50 |
| Philtanker  |            50 |
| Rajs        |            50 |
| Rogers      |            50 |
| Sarchand    |            50 |
| Seo         |            50 |
| Stiles      |            50 |
| Sullivan    |            50 |
| Taylor      |            50 |
| Vargas      |            50 |
| Vollman     |            50 |
| Walsh       |            50 |
| Weiss       |            50 |
+-------------+---------------+
47 rows in set (0.00 sec)



7.	The HR department needs a report that displays the last name and hire date of all employees who were hired in 2006.

select last_name, hire_date from employees where date_format(hire_date,'%Y')=2006;

mysql> select last_name, hire_date from employees where date_format(hire_date,'%Y')=2006;
Empty set (0.00 sec)

mysql> select last_name, hire_date from employees where date_format(hire_date,'%Y')=1998;
+-------------+------------+
| last_name   | hire_date  |
+-------------+------------+
| Pataballa   | 1998-02-05 |
| Urman       | 1998-03-07 |
| Himuro      | 1998-11-15 |
| Mikkilineni | 1998-09-28 |
| Rogers      | 1998-08-26 |
| Seo         | 1998-02-12 |
| Patel       | 1998-04-06 |
| Matos       | 1998-03-15 |
| Vargas      | 1998-07-09 |
| Olsen       | 1998-03-30 |
| Cambrault   | 1998-12-09 |
| Sewall      | 1998-11-03 |
| Bloom       | 1998-03-23 |
| Fox         | 1998-01-24 |
| Taylor      | 1998-03-24 |
| Livingston  | 1998-04-23 |
| Taylor      | 1998-01-24 |
| Fleaur      | 1998-02-23 |
| Dellinger   | 1998-06-24 |
| Gates       | 1998-07-11 |
| McCain      | 1998-07-01 |
| Walsh       | 1998-04-24 |
| Feeney      | 1998-05-23 |
+-------------+------------+
23 rows in set (0.00 sec)



8.	Create a report to display the last name and job title of all employees who do not have a manager.

select e.last_name, j.job_title from employees e join jobs j where e.manager_id is null and e.job_id = j.job_id;

mysql> select e.last_name, j.job_title from employees e join jobs j where e.manager_id is null and e.job_id = j.job_id;
+-----------+-----------+
| last_name | job_title |
+-----------+-----------+
| King      | President |
+-----------+-----------+
1 row in set (0.00 sec)



9.	Create a report to display the last name, salary, and commission for all employees who earn commissions. Sort data in descending order of salary and commissions. Use the column’s numeric position in the ORDER BY clause.

select last_name, salary,  commission_pct from employees where commission_pct is not null or commission_pct != 0 order by 2 desc,3 desc;

mysql> select last_name, salary,  commission_pct from employees where commission_pct is not null or commission_pct != 0 order by 2 desc, 3 desc;
+------------+----------+----------------+
| last_name  | salary   | commission_pct |
+------------+----------+----------------+
| Russell    | 14000.00 |           0.40 |
| Partners   | 13500.00 |           0.30 |
| Errazuriz  | 12000.00 |           0.30 |
| Ozer       | 11500.00 |           0.25 |
| Cambrault  | 11000.00 |           0.30 |
| Abel       | 11000.00 |           0.30 |
| Vishney    | 10500.00 |           0.25 |
| Zlotkey    | 10500.00 |           0.20 |
| King       | 10000.00 |           0.35 |
| Tucker     | 10000.00 |           0.30 |
| Bloom      | 10000.00 |           0.20 |
| Fox        |  9600.00 |           0.20 |
| Sully      |  9500.00 |           0.35 |
| Bernstein  |  9500.00 |           0.25 |
| Greene     |  9500.00 |           0.15 |
| McEwen     |  9000.00 |           0.35 |
| Hall       |  9000.00 |           0.25 |
| Hutton     |  8800.00 |           0.25 |
| Taylor     |  8600.00 |           0.20 |
| Livingston |  8400.00 |           0.20 |
| Smith      |  8000.00 |           0.30 |
| Olsen      |  8000.00 |           0.20 |
| Doran      |  7500.00 |           0.30 |
| Cambrault  |  7500.00 |           0.20 |
| Smith      |  7400.00 |           0.15 |
| Bates      |  7300.00 |           0.15 |
| Marvins    |  7200.00 |           0.10 |
| Sewall     |  7000.00 |           0.25 |
| Tuvault    |  7000.00 |           0.15 |
| Grant      |  7000.00 |           0.15 |
| Lee        |  6800.00 |           0.10 |
| Ande       |  6400.00 |           0.10 |
| Banda      |  6200.00 |           0.10 |
| Johnson    |  6200.00 |           0.10 |
| Kumar      |  6100.00 |           0.10 |
+------------+----------+----------------+
35 rows in set (0.00 sec)






10.	Display the last names of all employees where the third letter of the name is “a.”

select last_name from employees where regexp_like(last_name,'^..a.*$');

mysql> select last_name from employees where regexp_like(last_name,'^..a.*$');
+-----------+
| last_name |
+-----------+
| Grant     |
| Grant     |
| Whalen    |
+-----------+
3 rows in set (0.00 sec)


11.	Display the last names of all employees who have both an “a” and an “e” in their last name.

select last_name from employees where regexp_like(last_name,'a') and regexp_like(last_name,'e');

mysql> select last_name from employees where regexp_like(last_name,'a') and regexp_like(last_name,'e');
+------------+
| last_name  |
+------------+
| De Haan    |
| Faviet     |
| Raphaely   |
| Colmenares |
| Nayer      |
| Markle     |
| Philtanker |
| Patel      |
| Davies     |
| Partners   |
| Errazuriz  |
| Sewall     |
| Ande       |
| Bates      |
| Abel       |
| Fleaur     |
| Gates      |
| Whalen     |
| Hartstein  |
| Baer       |
+------------+
20 rows in set (0.00 sec)



12.	Display the last name, job, and salary for all employees whose job is that of a sales representative or a stock clerk, and whose salary is not equal to $2,500, $3,500, or $7,000.

select e.last_name, j.job_title, e.salary from employees e join jobs j on e.job_id = j.job_id and j.job_title in ('sales representative', 'stock clerk') and e.salary not in (2500,3500,7000);

mysql> select e.last_name, j.job_title, e.salary from employees e join jobs j on e.job_id = j.job_id and j.job_title in ('sales representative', 'stock clerk') and e.salary not in (2500,3500,7000);
+-------------+----------------------+----------+
| last_name   | job_title            | salary   |
+-------------+----------------------+----------+
| Tucker      | Sales Representative | 10000.00 |
| Bernstein   | Sales Representative |  9500.00 |
| Hall        | Sales Representative |  9000.00 |
| Olsen       | Sales Representative |  8000.00 |
| Cambrault   | Sales Representative |  7500.00 |
| King        | Sales Representative | 10000.00 |
| Sully       | Sales Representative |  9500.00 |
| McEwen      | Sales Representative |  9000.00 |
| Smith       | Sales Representative |  8000.00 |
| Doran       | Sales Representative |  7500.00 |
| Vishney     | Sales Representative | 10500.00 |
| Greene      | Sales Representative |  9500.00 |
| Marvins     | Sales Representative |  7200.00 |
| Lee         | Sales Representative |  6800.00 |
| Ande        | Sales Representative |  6400.00 |
| Banda       | Sales Representative |  6200.00 |
| Ozer        | Sales Representative | 11500.00 |
| Bloom       | Sales Representative | 10000.00 |
| Fox         | Sales Representative |  9600.00 |
| Smith       | Sales Representative |  7400.00 |
| Bates       | Sales Representative |  7300.00 |
| Kumar       | Sales Representative |  6100.00 |
| Abel        | Sales Representative | 11000.00 |
| Hutton      | Sales Representative |  8800.00 |
| Taylor      | Sales Representative |  8600.00 |
| Livingston  | Sales Representative |  8400.00 |
| Johnson     | Sales Representative |  6200.00 |
| Nayer       | Stock Clerk          |  3200.00 |
| Mikkilineni | Stock Clerk          |  2700.00 |
| Landry      | Stock Clerk          |  2400.00 |
| Markle      | Stock Clerk          |  2200.00 |
| Bissot      | Stock Clerk          |  3300.00 |
| Atkinson    | Stock Clerk          |  2800.00 |
| Olson       | Stock Clerk          |  2100.00 |
| Mallin      | Stock Clerk          |  3300.00 |
| Rogers      | Stock Clerk          |  2900.00 |
| Gee         | Stock Clerk          |  2400.00 |
| Philtanker  | Stock Clerk          |  2200.00 |
| Ladwig      | Stock Clerk          |  3600.00 |
| Stiles      | Stock Clerk          |  3200.00 |
| Seo         | Stock Clerk          |  2700.00 |
| Davies      | Stock Clerk          |  3100.00 |
| Matos       | Stock Clerk          |  2600.00 |
+-------------+----------------------+----------+
43 rows in set (0.00 sec)



13.	Display the last name, salary, and commission for all employees whose commission amount is 20%. 

select last_name, salary, commission_pct from employees where commission_pct = 0.20;

mysql> select last_name, salary, commission_pct from employees where commission_pct = 0.20;
+------------+----------+----------------+
| last_name  | salary   | commission_pct |
+------------+----------+----------------+
| Zlotkey    | 10500.00 |           0.20 |
| Olsen      |  8000.00 |           0.20 |
| Cambrault  |  7500.00 |           0.20 |
| Bloom      | 10000.00 |           0.20 |
| Fox        |  9600.00 |           0.20 |
| Taylor     |  8600.00 |           0.20 |
| Livingston |  8400.00 |           0.20 |
+------------+----------+----------------+
7 rows in set (0.00 sec)

----------------------------------------------- Aggregate Function -------------------------------------
The HR department needs the following reports:
14.	Find the highest, lowest, sum, and average salary of all employees. Label the columns Maximum, Minimum, Sum, and Average, respectively. Round your results to the nearest whole number.

select round(max(salary))"Maximum", round(min(salary))"Minimum", round(sum(salary))"Sum", round(avg(salary))"Average" from employees;

mysql> select round(max(salary))"Maximum", round(min(salary))"Minimum", round(sum(salary))"Sum", round(avg(salary))"Average" from employees;
+---------+---------+--------+---------+
| Maximum | Minimum | Sum    | Average |
+---------+---------+--------+---------+
|   24000 |    2100 | 691400 |    6462 |
+---------+---------+--------+---------+
1 row in set (0.00 sec)


15.	Create a query that displays employees’ last names, and indicates the amounts of their salaries with asterisks. Each asterisk signifies a thousand dollars. Sort the data in descending order of salary. Label the column EMPLOYEES_AND_THEIR_SALARIES.

select last_name"EMPLOYEES_" , repeat('*',floor(salary/1000))"_THEIR_SALARIES" from employees order by salary desc;

mysql> select last_name"EMPLOYEES_" , repeat('*',floor(salary/1000))"_THEIR_SALARIES" from employees order by salary desc;
+-------------+--------------------------+
| EMPLOYEES_  | _THEIR_SALARIES          |
+-------------+--------------------------+
| King        | ************************ |
| Kochhar     | *****************        |
| De Haan     | *****************        |
| Russell     | **************           |
| Partners    | *************            |
| Hartstein   | *************            |
| Greenberg   | ************             |
| Errazuriz   | ************             |
| Higgins     | ************             |
| Ozer        | ***********              |
| Raphaely    | ***********              |
| Cambrault   | ***********              |
| Abel        | ***********              |
| Zlotkey     | **********               |
| Vishney     | **********               |
| Tucker      | **********               |
| King        | **********               |
| Bloom       | **********               |
| Baer        | **********               |
| Fox         | *********                |
| Bernstein   | *********                |
| Sully       | *********                |
| Greene      | *********                |
| Hunold      | *********                |
| Faviet      | *********                |
| Hall        | *********                |
| McEwen      | *********                |
| Hutton      | ********                 |
| Taylor      | ********                 |
| Livingston  | ********                 |
| Gietz       | ********                 |
| Chen        | ********                 |
| Fripp       | ********                 |
| Weiss       | ********                 |
| Olsen       | ********                 |
| Smith       | ********                 |
| Kaufling    | *******                  |
| Urman       | *******                  |
| Sciarra     | *******                  |
| Cambrault   | *******                  |
| Doran       | *******                  |
| Smith       | *******                  |
| Bates       | *******                  |
| Marvins     | *******                  |
| Tuvault     | *******                  |
| Sewall      | *******                  |
| Grant       | *******                  |
| Popp        | ******                   |
| Lee         | ******                   |
| Vollman     | ******                   |
| Mavris      | ******                   |
| Ande        | ******                   |
| Banda       | ******                   |
| Johnson     | ******                   |
| Kumar       | ******                   |
| Ernst       | ******                   |
| Fay         | ******                   |
| Mourgos     | *****                    |
| Austin      | ****                     |
| Pataballa   | ****                     |
| Whalen      | ****                     |
| Lorentz     | ****                     |
| Sarchand    | ****                     |
| Bull        | ****                     |
| Bell        | ****                     |
| Everett     | ***                      |
| Chung       | ***                      |
| Ladwig      | ***                      |
| Dilly       | ***                      |
| Rajs        | ***                      |
| Dellinger   | ***                      |
| Bissot      | ***                      |
| Mallin      | ***                      |
| Nayer       | ***                      |
| Stiles      | ***                      |
| Taylor      | ***                      |
| McCain      | ***                      |
| Khoo        | ***                      |
| Davies      | ***                      |
| Fleaur      | ***                      |
| Walsh       | ***                      |
| Cabrio      | ***                      |
| Feeney      | ***                      |
| Baida       | **                       |
| Rogers      | **                       |
| Gates       | **                       |
| Tobias      | **                       |
| Atkinson    | **                       |
| Geoni       | **                       |
| Jones       | **                       |
| Mikkilineni | **                       |
| Seo         | **                       |
| Himuro      | **                       |
| Matos       | **                       |
| OConnell    | **                       |
| Grant       | **                       |
| Colmenares  | **                       |
| Marlow      | **                       |
| Patel       | **                       |
| Vargas      | **                       |
| Sullivan    | **                       |
| Perkins     | **                       |
| Landry      | **                       |
| Gee         | **                       |
| Markle      | **                       |
| Philtanker  | **                       |
| Olson       | **                       |
+-------------+--------------------------+
107 rows in set (0.00 sec)




------------------------------------------ Joins --------------------------------------------------------
16.	Write a query for the HR department to produce the addresses of all the departments. Use the LOCATIONS and COUNTRIES tables. Show the location ID, street address, city, state or province, and country in the output. 

select l.location_id"location ID", l.street_address"street address", l.city"city", l.state_province"state or province", c.country_name"country" from locations l left join countries c on l.country_id=c.country_id;

mysql> select l.location_id"location ID", l.street_address"street address", l.city"city", l.state_province"state or province", c.country_name"country" from locations l left join countries c on l.country_id=c.country_id;
+-------------+------------------------------------------+---------------------+-------------------+--------------------------+
| location ID | street address                           | city                | state or province | country                  |
+-------------+------------------------------------------+---------------------+-------------------+--------------------------+
|        1000 | 1297 Via Cola di Rie                     | Roma                | NULL              | Italy                    |
|        1100 | 93091 Calle della Testa                  | Venice              | NULL              | Italy                    |
|        1200 | 2017 Shinjuku-ku                         | Tokyo               | Tokyo Prefecture  | Japan                    |
|        1300 | 9450 Kamiya-cho                          | Hiroshima           | NULL              | Japan                    |
|        1400 | 2014 Jabberwocky Rd                      | Southlake           | Texas             | United States of America |
|        1500 | 2011 Interiors Blvd                      | South San Francisco | California        | United States of America |
|        1600 | 2007 Zagora St                           | South Brunswick     | New Jersey        | United States of America |
|        1700 | 2004 Charade Rd                          | Seattle             | Washington        | United States of America |
|        1800 | 147 Spadina Ave                          | Toronto             | Ontario           | Canada                   |
|        1900 | 6092 Boxwood St                          | Whitehorse          | Yukon             | Canada                   |
|        2000 | 40-5-12 Laogianggen                      | Beijing             | NULL              | China                    |
|        2100 | 1298 Vileparle (E)                       | Bombay              | Maharashtra       | India                    |
|        2200 | 12-98 Victoria Street                    | Sydney              | New South Wales   | Australia                |
|        2300 | 198 Clementi North                       | Singapore           | NULL              | Singapore                |
|        2400 | 8204 Arthur St                           | London              | NULL              | United Kingdom           |
|        2500 | Magdalen Centre, The Oxford Science Park | Oxford              | Oxford            | United Kingdom           |
|        2600 | 9702 Chester Road                        | Stretford           | Manchester        | United Kingdom           |
|        2700 | Schwanthalerstr. 7031                    | Munich              | Bavaria           | Germany                  |
|        2800 | Rua Frei Caneca 1360                     | Sao Paulo           | Sao Paulo         | Brazil                   |
|        2900 | 20 Rue des Corps-Saints                  | Geneva              | Geneve            | Switzerland              |
|        3000 | Murtenstrasse 921                        | Bern                | BE                | Switzerland              |
|        3100 | Pieter Breughelstraat 837                | Utrecht             | Utrecht           | Netherlands              |
|        3200 | Mariano Escobedo 9991                    | Mexico City         | Distrito Federal, | Mexico                   |
+-------------+------------------------------------------+---------------------+-------------------+--------------------------+
23 rows in set (0.00 sec)


17.	The HR department needs a report of all employees with corresponding departments. Write a query to display the last name, department number, and department name for all the employees.

select e.last_name"Last Name", e.department_id"Department Number", d.department_name"Department Name" from employees e left join departments d on e.department_id=d.department_id;

mysql> select e.last_name"Last Name", e.department_id"Department Number", d.department_name"Department Name" from employees e left join departments d on e.department_id=d.department_id;
+-------------+-------------------+------------------+
| Last Name   | Department Number | Department Name  |
+-------------+-------------------+------------------+
| King        |                90 | Executive        |
| Kochhar     |                90 | Executive        |
| De Haan     |                90 | Executive        |
| Hunold      |                60 | IT               |
| Ernst       |                60 | IT               |
| Austin      |                60 | IT               |
| Pataballa   |                60 | IT               |
| Lorentz     |                60 | IT               |
| Greenberg   |               100 | Finance          |
| Faviet      |               100 | Finance          |
| Chen        |               100 | Finance          |
| Sciarra     |               100 | Finance          |
| Urman       |               100 | Finance          |
| Popp        |               100 | Finance          |
| Raphaely    |                30 | Purchasing       |
| Khoo        |                30 | Purchasing       |
| Baida       |                30 | Purchasing       |
| Tobias      |                30 | Purchasing       |
| Himuro      |                30 | Purchasing       |
| Colmenares  |                30 | Purchasing       |
| Weiss       |                50 | Shipping         |
| Fripp       |                50 | Shipping         |
| Kaufling    |                50 | Shipping         |
| Vollman     |                50 | Shipping         |
| Mourgos     |                50 | Shipping         |
| Nayer       |                50 | Shipping         |
| Mikkilineni |                50 | Shipping         |
| Landry      |                50 | Shipping         |
| Markle      |                50 | Shipping         |
| Bissot      |                50 | Shipping         |
| Atkinson    |                50 | Shipping         |
| Marlow      |                50 | Shipping         |
| Olson       |                50 | Shipping         |
| Mallin      |                50 | Shipping         |
| Rogers      |                50 | Shipping         |
| Gee         |                50 | Shipping         |
| Philtanker  |                50 | Shipping         |
| Ladwig      |                50 | Shipping         |
| Stiles      |                50 | Shipping         |
| Seo         |                50 | Shipping         |
| Patel       |                50 | Shipping         |
| Rajs        |                50 | Shipping         |
| Davies      |                50 | Shipping         |
| Matos       |                50 | Shipping         |
| Vargas      |                50 | Shipping         |
| Russell     |                80 | Sales            |
| Partners    |                80 | Sales            |
| Errazuriz   |                80 | Sales            |
| Cambrault   |                80 | Sales            |
| Zlotkey     |                80 | Sales            |
| Tucker      |                80 | Sales            |
| Bernstein   |                80 | Sales            |
| Hall        |                80 | Sales            |
| Olsen       |                80 | Sales            |
| Cambrault   |                80 | Sales            |
| Tuvault     |                80 | Sales            |
| King        |                80 | Sales            |
| Sully       |                80 | Sales            |
| McEwen      |                80 | Sales            |
| Smith       |                80 | Sales            |
| Doran       |                80 | Sales            |
| Sewall      |                80 | Sales            |
| Vishney     |                80 | Sales            |
| Greene      |                80 | Sales            |
| Marvins     |                80 | Sales            |
| Lee         |                80 | Sales            |
| Ande        |                80 | Sales            |
| Banda       |                80 | Sales            |
| Ozer        |                80 | Sales            |
| Bloom       |                80 | Sales            |
| Fox         |                80 | Sales            |
| Smith       |                80 | Sales            |
| Bates       |                80 | Sales            |
| Kumar       |                80 | Sales            |
| Abel        |                80 | Sales            |
| Hutton      |                80 | Sales            |
| Taylor      |                80 | Sales            |
| Livingston  |                80 | Sales            |
| Grant       |              NULL | NULL             |
| Johnson     |                80 | Sales            |
| Taylor      |                50 | Shipping         |
| Fleaur      |                50 | Shipping         |
| Sullivan    |                50 | Shipping         |
| Geoni       |                50 | Shipping         |
| Sarchand    |                50 | Shipping         |
| Bull        |                50 | Shipping         |
| Dellinger   |                50 | Shipping         |
| Cabrio      |                50 | Shipping         |
| Chung       |                50 | Shipping         |
| Dilly       |                50 | Shipping         |
| Gates       |                50 | Shipping         |
| Perkins     |                50 | Shipping         |
| Bell        |                50 | Shipping         |
| Everett     |                50 | Shipping         |
| McCain      |                50 | Shipping         |
| Jones       |                50 | Shipping         |
| Walsh       |                50 | Shipping         |
| Feeney      |                50 | Shipping         |
| OConnell    |                50 | Shipping         |
| Grant       |                50 | Shipping         |
| Whalen      |                10 | Administration   |
| Hartstein   |                20 | Marketing        |
| Fay         |                20 | Marketing        |
| Mavris      |                40 | Human Resources  |
| Baer        |                70 | Public Relations |
| Higgins     |               110 | Accounting       |
| Gietz       |               110 | Accounting       |
+-------------+-------------------+------------------+
107 rows in set (0.00 sec)



18.	The HR department needs a report of employees in Toronto. Display the last name, job, department number, and department name for all employees who work in Toronto.

select e.last_name"Last Name", e.department_id"Department Number", d.department_name"Department Name" from employees e join departments d join locations l on e.department_id=d.department_id and d.location_id=l.location_id and l.city='Toronto';

mysql> select e.last_name"Last Name", e.department_id"Department Number", d.department_name"Department Name" from employees e join departments d join locations l on e.department_id=d.department_id and d.location_id=l.location_id and l.city='Toronto';
+-----------+-------------------+-----------------+
| Last Name | Department Number | Department Name |
+-----------+-------------------+-----------------+
| Hartstein |                20 | Marketing       |
| Fay       |                20 | Marketing       |
+-----------+-------------------+-----------------+
2 rows in set (0.00 sec)



19.	Create a report to display employees’ last names and employee numbers along with their managers’ last names and manager numbers. Label the columns Employee, Emp#, Manager, and Mgr#, respectively. 

select e.last_name"Emp Last Name", e.employee_id"Emp ID", m.last_name"Manager Last Name", e.manager_id from employees e join employees m on e.manager_id=m.employee_id;

mysql> select e.last_name"Emp Last Name", e.employee_id"Emp ID", m.last_name"Manager Last Name", e.manager_id from employees e join employees m on e.manager_id=m.employee_id;
+---------------+--------+-------------------+------------+
| Emp Last Name | Emp ID | Manager Last Name | manager_id |
+---------------+--------+-------------------+------------+
| Kochhar       |    101 | King              |        100 |
| De Haan       |    102 | King              |        100 |
| Hunold        |    103 | De Haan           |        102 |
| Ernst         |    104 | Hunold            |        103 |
| Austin        |    105 | Hunold            |        103 |
| Pataballa     |    106 | Hunold            |        103 |
| Lorentz       |    107 | Hunold            |        103 |
| Greenberg     |    108 | Kochhar           |        101 |
| Faviet        |    109 | Greenberg         |        108 |
| Chen          |    110 | Greenberg         |        108 |
| Sciarra       |    111 | Greenberg         |        108 |
| Urman         |    112 | Greenberg         |        108 |
| Popp          |    113 | Greenberg         |        108 |
| Raphaely      |    114 | King              |        100 |
| Khoo          |    115 | Raphaely          |        114 |
| Baida         |    116 | Raphaely          |        114 |
| Tobias        |    117 | Raphaely          |        114 |
| Himuro        |    118 | Raphaely          |        114 |
| Colmenares    |    119 | Raphaely          |        114 |
| Weiss         |    120 | King              |        100 |
| Fripp         |    121 | King              |        100 |
| Kaufling      |    122 | King              |        100 |
| Vollman       |    123 | King              |        100 |
| Mourgos       |    124 | King              |        100 |
| Nayer         |    125 | Weiss             |        120 |
| Mikkilineni   |    126 | Weiss             |        120 |
| Landry        |    127 | Weiss             |        120 |
| Markle        |    128 | Weiss             |        120 |
| Bissot        |    129 | Fripp             |        121 |
| Atkinson      |    130 | Fripp             |        121 |
| Marlow        |    131 | Fripp             |        121 |
| Olson         |    132 | Fripp             |        121 |
| Mallin        |    133 | Kaufling          |        122 |
| Rogers        |    134 | Kaufling          |        122 |
| Gee           |    135 | Kaufling          |        122 |
| Philtanker    |    136 | Kaufling          |        122 |
| Ladwig        |    137 | Vollman           |        123 |
| Stiles        |    138 | Vollman           |        123 |
| Seo           |    139 | Vollman           |        123 |
| Patel         |    140 | Vollman           |        123 |
| Rajs          |    141 | Mourgos           |        124 |
| Davies        |    142 | Mourgos           |        124 |
| Matos         |    143 | Mourgos           |        124 |
| Vargas        |    144 | Mourgos           |        124 |
| Russell       |    145 | King              |        100 |
| Partners      |    146 | King              |        100 |
| Errazuriz     |    147 | King              |        100 |
| Cambrault     |    148 | King              |        100 |
| Zlotkey       |    149 | King              |        100 |
| Tucker        |    150 | Russell           |        145 |
| Bernstein     |    151 | Russell           |        145 |
| Hall          |    152 | Russell           |        145 |
| Olsen         |    153 | Russell           |        145 |
| Cambrault     |    154 | Russell           |        145 |
| Tuvault       |    155 | Russell           |        145 |
| King          |    156 | Partners          |        146 |
| Sully         |    157 | Partners          |        146 |
| McEwen        |    158 | Partners          |        146 |
| Smith         |    159 | Partners          |        146 |
| Doran         |    160 | Partners          |        146 |
| Sewall        |    161 | Partners          |        146 |
| Vishney       |    162 | Errazuriz         |        147 |
| Greene        |    163 | Errazuriz         |        147 |
| Marvins       |    164 | Errazuriz         |        147 |
| Lee           |    165 | Errazuriz         |        147 |
| Ande          |    166 | Errazuriz         |        147 |
| Banda         |    167 | Errazuriz         |        147 |
| Ozer          |    168 | Cambrault         |        148 |
| Bloom         |    169 | Cambrault         |        148 |
| Fox           |    170 | Cambrault         |        148 |
| Smith         |    171 | Cambrault         |        148 |
| Bates         |    172 | Cambrault         |        148 |
| Kumar         |    173 | Cambrault         |        148 |
| Abel          |    174 | Zlotkey           |        149 |
| Hutton        |    175 | Zlotkey           |        149 |
| Taylor        |    176 | Zlotkey           |        149 |
| Livingston    |    177 | Zlotkey           |        149 |
| Grant         |    178 | Zlotkey           |        149 |
| Johnson       |    179 | Zlotkey           |        149 |
| Taylor        |    180 | Weiss             |        120 |
| Fleaur        |    181 | Weiss             |        120 |
| Sullivan      |    182 | Weiss             |        120 |
| Geoni         |    183 | Weiss             |        120 |
| Sarchand      |    184 | Fripp             |        121 |
| Bull          |    185 | Fripp             |        121 |
| Dellinger     |    186 | Fripp             |        121 |
| Cabrio        |    187 | Fripp             |        121 |
| Chung         |    188 | Kaufling          |        122 |
| Dilly         |    189 | Kaufling          |        122 |
| Gates         |    190 | Kaufling          |        122 |
| Perkins       |    191 | Kaufling          |        122 |
| Bell          |    192 | Vollman           |        123 |
| Everett       |    193 | Vollman           |        123 |
| McCain        |    194 | Vollman           |        123 |
| Jones         |    195 | Vollman           |        123 |
| Walsh         |    196 | Mourgos           |        124 |
| Feeney        |    197 | Mourgos           |        124 |
| OConnell      |    198 | Mourgos           |        124 |
| Grant         |    199 | Mourgos           |        124 |
| Whalen        |    200 | Kochhar           |        101 |
| Hartstein     |    201 | King              |        100 |
| Fay           |    202 | Hartstein         |        201 |
| Mavris        |    203 | Kochhar           |        101 |
| Baer          |    204 | Kochhar           |        101 |
| Higgins       |    205 | Kochhar           |        101 |
| Gietz         |    206 | Higgins           |        205 |
+---------------+--------+-------------------+------------+
106 rows in set (0.00 sec)



20.	Modifyabove to display all employees, including King, who has no manager. Order the results by employee number.

select e.last_name"Emp Last Name", e.employee_id"Emp ID", m.last_name"Manager Last Name", e.manager_id from employees e left join employees m on e.manager_id=m.employee_id order by e.employee_id;

mysql> select e.last_name"Emp Last Name", e.employee_id"Emp ID", m.last_name"Manager Last Name", e.manager_id from employees e left join employees m on e.manager_id=m.employee_id order by e.employee_id;
+---------------+--------+-------------------+------------+
| Emp Last Name | Emp ID | Manager Last Name | manager_id |
+---------------+--------+-------------------+------------+
| King          |    100 | NULL              |       NULL |
| Kochhar       |    101 | King              |        100 |
| De Haan       |    102 | King              |        100 |
| Hunold        |    103 | De Haan           |        102 |
| Ernst         |    104 | Hunold            |        103 |
| Austin        |    105 | Hunold            |        103 |
| Pataballa     |    106 | Hunold            |        103 |
| Lorentz       |    107 | Hunold            |        103 |
| Greenberg     |    108 | Kochhar           |        101 |
| Faviet        |    109 | Greenberg         |        108 |
| Chen          |    110 | Greenberg         |        108 |
| Sciarra       |    111 | Greenberg         |        108 |
| Urman         |    112 | Greenberg         |        108 |
| Popp          |    113 | Greenberg         |        108 |
| Raphaely      |    114 | King              |        100 |
| Khoo          |    115 | Raphaely          |        114 |
| Baida         |    116 | Raphaely          |        114 |
| Tobias        |    117 | Raphaely          |        114 |
| Himuro        |    118 | Raphaely          |        114 |
| Colmenares    |    119 | Raphaely          |        114 |
| Weiss         |    120 | King              |        100 |
| Fripp         |    121 | King              |        100 |
| Kaufling      |    122 | King              |        100 |
| Vollman       |    123 | King              |        100 |
| Mourgos       |    124 | King              |        100 |
| Nayer         |    125 | Weiss             |        120 |
| Mikkilineni   |    126 | Weiss             |        120 |
| Landry        |    127 | Weiss             |        120 |
| Markle        |    128 | Weiss             |        120 |
| Bissot        |    129 | Fripp             |        121 |
| Atkinson      |    130 | Fripp             |        121 |
| Marlow        |    131 | Fripp             |        121 |
| Olson         |    132 | Fripp             |        121 |
| Mallin        |    133 | Kaufling          |        122 |
| Rogers        |    134 | Kaufling          |        122 |
| Gee           |    135 | Kaufling          |        122 |
| Philtanker    |    136 | Kaufling          |        122 |
| Ladwig        |    137 | Vollman           |        123 |
| Stiles        |    138 | Vollman           |        123 |
| Seo           |    139 | Vollman           |        123 |
| Patel         |    140 | Vollman           |        123 |
| Rajs          |    141 | Mourgos           |        124 |
| Davies        |    142 | Mourgos           |        124 |
| Matos         |    143 | Mourgos           |        124 |
| Vargas        |    144 | Mourgos           |        124 |
| Russell       |    145 | King              |        100 |
| Partners      |    146 | King              |        100 |
| Errazuriz     |    147 | King              |        100 |
| Cambrault     |    148 | King              |        100 |
| Zlotkey       |    149 | King              |        100 |
| Tucker        |    150 | Russell           |        145 |
| Bernstein     |    151 | Russell           |        145 |
| Hall          |    152 | Russell           |        145 |
| Olsen         |    153 | Russell           |        145 |
| Cambrault     |    154 | Russell           |        145 |
| Tuvault       |    155 | Russell           |        145 |
| King          |    156 | Partners          |        146 |
| Sully         |    157 | Partners          |        146 |
| McEwen        |    158 | Partners          |        146 |
| Smith         |    159 | Partners          |        146 |
| Doran         |    160 | Partners          |        146 |
| Sewall        |    161 | Partners          |        146 |
| Vishney       |    162 | Errazuriz         |        147 |
| Greene        |    163 | Errazuriz         |        147 |
| Marvins       |    164 | Errazuriz         |        147 |
| Lee           |    165 | Errazuriz         |        147 |
| Ande          |    166 | Errazuriz         |        147 |
| Banda         |    167 | Errazuriz         |        147 |
| Ozer          |    168 | Cambrault         |        148 |
| Bloom         |    169 | Cambrault         |        148 |
| Fox           |    170 | Cambrault         |        148 |
| Smith         |    171 | Cambrault         |        148 |
| Bates         |    172 | Cambrault         |        148 |
| Kumar         |    173 | Cambrault         |        148 |
| Abel          |    174 | Zlotkey           |        149 |
| Hutton        |    175 | Zlotkey           |        149 |
| Taylor        |    176 | Zlotkey           |        149 |
| Livingston    |    177 | Zlotkey           |        149 |
| Grant         |    178 | Zlotkey           |        149 |
| Johnson       |    179 | Zlotkey           |        149 |
| Taylor        |    180 | Weiss             |        120 |
| Fleaur        |    181 | Weiss             |        120 |
| Sullivan      |    182 | Weiss             |        120 |
| Geoni         |    183 | Weiss             |        120 |
| Sarchand      |    184 | Fripp             |        121 |
| Bull          |    185 | Fripp             |        121 |
| Dellinger     |    186 | Fripp             |        121 |
| Cabrio        |    187 | Fripp             |        121 |
| Chung         |    188 | Kaufling          |        122 |
| Dilly         |    189 | Kaufling          |        122 |
| Gates         |    190 | Kaufling          |        122 |
| Perkins       |    191 | Kaufling          |        122 |
| Bell          |    192 | Vollman           |        123 |
| Everett       |    193 | Vollman           |        123 |
| McCain        |    194 | Vollman           |        123 |
| Jones         |    195 | Vollman           |        123 |
| Walsh         |    196 | Mourgos           |        124 |
| Feeney        |    197 | Mourgos           |        124 |
| OConnell      |    198 | Mourgos           |        124 |
| Grant         |    199 | Mourgos           |        124 |
| Whalen        |    200 | Kochhar           |        101 |
| Hartstein     |    201 | King              |        100 |
| Fay           |    202 | Hartstein         |        201 |
| Mavris        |    203 | Kochhar           |        101 |
| Baer          |    204 | Kochhar           |        101 |
| Higgins       |    205 | Kochhar           |        101 |
| Gietz         |    206 | Higgins           |        205 |
+---------------+--------+-------------------+------------+
107 rows in set (0.00 sec)


21.	Create a report for the HR department that displays employee last names, department numbers, and all employees who work in the same department(colleague) as a given employee. Give each column an appropriate label.

select e.last_name"Last Name", e.department_id"Department Number" from employees e join (select department_id from employees where employee_id=101) d on e.department_id=d.department_id;

select e.last_name"Last Name", e.department_id"Department Number" from employees e join departments d on e.department_id=d.department_id where e.department_id=(select department_id from employees where employee_id=101);


mysql> select e.last_name"Last Name", e.department_id"Department Number" from employees e join (select department_id from employees where employee_id=101) d on e.department_id=d.department_id;
+-----------+-------------------+
| Last Name | Department Number |
+-----------+-------------------+
| King      |                90 |
| Kochhar   |                90 |
| De Haan   |                90 |
+-----------+-------------------+
3 rows in set (0.00 sec)

mysql> select e.last_name"Last Name", e.department_id"Department Number" from employees e join departments d on e.department_id=d.department_id where e.department_id=(select department_id from employees where employee_id=101);
+-----------+-------------------+
| Last Name | Department Number |
+-----------+-------------------+
| King      |                90 |
| Kochhar   |                90 |
| De Haan   |                90 |
+-----------+-------------------+
3 rows in set (0.00 sec)


22.	The HR department needs a report on job grades and salaries. To familiarize yourself with the JOB_GRADES table, first show the structure of the JOB_GRADES table. Then create a query that displays the name, job, department name, salary, and grade for all employees.
DESC JOB_GRADES;

******************************************JOB_GRADES TABLE NOT FOUND****************************************************************************






23.	The HR department wants to determine the names of all employees who were hired after Davies. Create a query to display the name and hire date of any employee hired after employee Davies.

select concat(e.first_name,' ',e.last_name)"Name", e.hire_date"HireDate" from employees e join (select hire_date from employees where last_name = 'Davies') h on e.hire_date>h.hire_date;

mysql> select concat(e.first_name,' ',e.last_name)"Name", e.hire_date"HireDate" from employees e join (select hire_date from employees where last_name = 'Davies') h on e.hire_date>h.hire_date;
+-------------------+------------+
| Name              | HireDate   |
+-------------------+------------+
| David Austin      | 1997-06-25 |
| Valli Pataballa   | 1998-02-05 |
| Diana Lorentz     | 1999-02-07 |
| John Chen         | 1997-09-28 |
| Ismael Sciarra    | 1997-09-30 |
| Jose Manuel Urman | 1998-03-07 |
| Luis Popp         | 1999-12-07 |
| Shelli Baida      | 1997-12-24 |
| Sigal Tobias      | 1997-07-24 |
| Guy Himuro        | 1998-11-15 |
| Karen Colmenares  | 1999-08-10 |
| Adam Fripp        | 1997-04-10 |
| Shanta Vollman    | 1997-10-10 |
| Kevin Mourgos     | 1999-11-16 |
| Julia Nayer       | 1997-07-16 |
| Irene Mikkilineni | 1998-09-28 |
| James Landry      | 1999-01-14 |
| Steven Markle     | 2000-03-08 |
| Laura Bissot      | 1997-08-20 |
| Mozhe Atkinson    | 1997-10-30 |
| James Marlow      | 1997-02-16 |
| TJ Olson          | 1999-04-10 |
| Michael Rogers    | 1998-08-26 |
| Ki Gee            | 1999-12-12 |
| Hazel Philtanker  | 2000-02-06 |
| Stephen Stiles    | 1997-10-26 |
| John Seo          | 1998-02-12 |
| Joshua Patel      | 1998-04-06 |
| Randall Matos     | 1998-03-15 |
| Peter Vargas      | 1998-07-09 |
| Alberto Errazuriz | 1997-03-10 |
| Gerald Cambrault  | 1999-10-15 |
| Eleni Zlotkey     | 2000-01-29 |
| Peter Tucker      | 1997-01-30 |
| David Bernstein   | 1997-03-24 |
| Peter Hall        | 1997-08-20 |
| Christopher Olsen | 1998-03-30 |
| Nanette Cambrault | 1998-12-09 |
| Oliver Tuvault    | 1999-11-23 |
| Lindsey Smith     | 1997-03-10 |
| Louise Doran      | 1997-12-15 |
| Sarath Sewall     | 1998-11-03 |
| Clara Vishney     | 1997-11-11 |
| Danielle Greene   | 1999-03-19 |
| Mattea Marvins    | 2000-01-24 |
| David Lee         | 2000-02-23 |
| Sundar Ande       | 2000-03-24 |
| Amit Banda        | 2000-04-21 |
| Lisa Ozer         | 1997-03-11 |
| Harrison Bloom    | 1998-03-23 |
| Tayler Fox        | 1998-01-24 |
| William Smith     | 1999-02-23 |
| Elizabeth Bates   | 1999-03-24 |
| Sundita Kumar     | 2000-04-21 |
| Alyssa Hutton     | 1997-03-19 |
| Jonathon Taylor   | 1998-03-24 |
| Jack Livingston   | 1998-04-23 |
| Kimberely Grant   | 1999-05-24 |
| Charles Johnson   | 2000-01-04 |
| Winston Taylor    | 1998-01-24 |
| Jean Fleaur       | 1998-02-23 |
| Martha Sullivan   | 1999-06-21 |
| Girard Geoni      | 2000-02-03 |
| Alexis Bull       | 1997-02-20 |
| Julia Dellinger   | 1998-06-24 |
| Anthony Cabrio    | 1999-02-07 |
| Kelly Chung       | 1997-06-14 |
| Jennifer Dilly    | 1997-08-13 |
| Timothy Gates     | 1998-07-11 |
| Randall Perkins   | 1999-12-19 |
| Britney Everett   | 1997-03-03 |
| Samuel McCain     | 1998-07-01 |
| Vance Jones       | 1999-03-17 |
| Alana Walsh       | 1998-04-24 |
| Kevin Feeney      | 1998-05-23 |
| Donald OConnell   | 1999-06-21 |
| Douglas Grant     | 2000-01-13 |
| Pat Fay           | 1997-08-17 |
+-------------------+------------+
78 rows in set (0.00 sec)

24.	The HR department needs to find the names and hire dates of all employees who were hired before their managers, along with their managers’ names and hire dates.

select concat(e.first_name,' ',e.last_name)"Employee Name", e.hire_date"Emp HireDate", concat(m.first_name,' ',m.last_name)"Manager Name", m.hire_date"Man HireDate" from employees e join employees m on e.manager_id=m.employee_id and e.hire_date<m.hire_date;

mysql> select concat(e.first_name,' ',e.last_name)"Employee Name", e.hire_date"Emp HireDate", concat(m.first_name,' ',m.last_name)"Manager Name", m.hire_date"Man HireDate" from employees e join employees m on e.manager_id=m.employee_id and e.hire_date<m.hire_date;
+------------------+--------------+------------------+--------------+
| Employee Name    | Emp HireDate | Manager Name     | Man HireDate |
+------------------+--------------+------------------+--------------+
| Alexander Hunold | 1990-01-03   | Lex De Haan      | 1993-01-13   |
| Daniel Faviet    | 1994-08-16   | Nancy Greenberg  | 1994-08-17   |
| James Marlow     | 1997-02-16   | Adam Fripp       | 1997-04-10   |
| Renske Ladwig    | 1995-07-14   | Shanta Vollman   | 1997-10-10   |
| Trenna Rajs      | 1995-10-17   | Kevin Mourgos    | 1999-11-16   |
| Curtis Davies    | 1997-01-29   | Kevin Mourgos    | 1999-11-16   |
| Randall Matos    | 1998-03-15   | Kevin Mourgos    | 1999-11-16   |
| Peter Vargas     | 1998-07-09   | Kevin Mourgos    | 1999-11-16   |
| Janette King     | 1996-01-30   | Karen Partners   | 1997-01-05   |
| Patrick Sully    | 1996-03-04   | Karen Partners   | 1997-01-05   |
| Allan McEwen     | 1996-08-01   | Karen Partners   | 1997-01-05   |
| Lisa Ozer        | 1997-03-11   | Gerald Cambrault | 1999-10-15   |
| Harrison Bloom   | 1998-03-23   | Gerald Cambrault | 1999-10-15   |
| Tayler Fox       | 1998-01-24   | Gerald Cambrault | 1999-10-15   |
| William Smith    | 1999-02-23   | Gerald Cambrault | 1999-10-15   |
| Elizabeth Bates  | 1999-03-24   | Gerald Cambrault | 1999-10-15   |
| Ellen Abel       | 1996-05-11   | Eleni Zlotkey    | 2000-01-29   |
| Alyssa Hutton    | 1997-03-19   | Eleni Zlotkey    | 2000-01-29   |
| Jonathon Taylor  | 1998-03-24   | Eleni Zlotkey    | 2000-01-29   |
| Jack Livingston  | 1998-04-23   | Eleni Zlotkey    | 2000-01-29   |
| Kimberely Grant  | 1999-05-24   | Eleni Zlotkey    | 2000-01-29   |
| Charles Johnson  | 2000-01-04   | Eleni Zlotkey    | 2000-01-29   |
| Nandita Sarchand | 1996-01-27   | Adam Fripp       | 1997-04-10   |
| Alexis Bull      | 1997-02-20   | Adam Fripp       | 1997-04-10   |
| Sarah Bell       | 1996-02-04   | Shanta Vollman   | 1997-10-10   |
| Britney Everett  | 1997-03-03   | Shanta Vollman   | 1997-10-10   |
| Alana Walsh      | 1998-04-24   | Kevin Mourgos    | 1999-11-16   |
| Kevin Feeney     | 1998-05-23   | Kevin Mourgos    | 1999-11-16   |
| Donald OConnell  | 1999-06-21   | Kevin Mourgos    | 1999-11-16   |
| Jennifer Whalen  | 1987-09-17   | Neena Kochhar    | 1989-09-21   |
+------------------+--------------+------------------+--------------+
30 rows in set (0.00 sec)

 ------------------------------------------------ Using Subqueries to Solve Queries -------------------------
 
25.	The HR department needs a query the to display  the last name and hire date of any employee in the same department as the employee whose name the user supplies (excluding that employee). For example, if the user enters Zlotkey, find all employees who work with Zlotkey (excluding Zlotkey).

select last_name, hire_date from employees where department_id in (select department_id from employees where last_name = 'Zlotkey') and last_name not in ('Zlotkey');

mysql> select last_name, hire_date from employees where department_id in (select department_id from employees where last_name = 'Zlotkey') and last_name not in ('Zlotkey');
+------------+------------+
| last_name  | hire_date  |
+------------+------------+
| Russell    | 1996-10-01 |
| Partners   | 1997-01-05 |
| Errazuriz  | 1997-03-10 |
| Cambrault  | 1999-10-15 |
| Tucker     | 1997-01-30 |
| Bernstein  | 1997-03-24 |
| Hall       | 1997-08-20 |
| Olsen      | 1998-03-30 |
| Cambrault  | 1998-12-09 |
| Tuvault    | 1999-11-23 |
| King       | 1996-01-30 |
| Sully      | 1996-03-04 |
| McEwen     | 1996-08-01 |
| Smith      | 1997-03-10 |
| Doran      | 1997-12-15 |
| Sewall     | 1998-11-03 |
| Vishney    | 1997-11-11 |
| Greene     | 1999-03-19 |
| Marvins    | 2000-01-24 |
| Lee        | 2000-02-23 |
| Ande       | 2000-03-24 |
| Banda      | 2000-04-21 |
| Ozer       | 1997-03-11 |
| Bloom      | 1998-03-23 |
| Fox        | 1998-01-24 |
| Smith      | 1999-02-23 |
| Bates      | 1999-03-24 |
| Kumar      | 2000-04-21 |
| Abel       | 1996-05-11 |
| Hutton     | 1997-03-19 |
| Taylor     | 1998-03-24 |
| Livingston | 1998-04-23 |
| Johnson    | 2000-01-04 |
+------------+------------+
33 rows in set (0.00 sec)


26. Create a report that displays the employee number, last name, and salary of all employees who earn more than the average salary. Sort the results in ascending order by salary.

select employee_id, last_name, salary from employees where salary > (select avg(salary) from employees) order by salary;

mysql> select employee_id, last_name, salary from employees where salary > (select avg(salary) from employees) order by salary;
+-------------+------------+----------+
| employee_id | last_name  | salary   |
+-------------+------------+----------+
|         165 | Lee        |  6800.00 |
|         155 | Tuvault    |  7000.00 |
|         161 | Sewall     |  7000.00 |
|         178 | Grant      |  7000.00 |
|         164 | Marvins    |  7200.00 |
|         172 | Bates      |  7300.00 |
|         171 | Smith      |  7400.00 |
|         160 | Doran      |  7500.00 |
|         111 | Sciarra    |  7500.00 |
|         154 | Cambrault  |  7500.00 |
|         112 | Urman      |  7800.00 |
|         122 | Kaufling   |  7900.00 |
|         159 | Smith      |  8000.00 |
|         153 | Olsen      |  8000.00 |
|         120 | Weiss      |  8000.00 |
|         110 | Chen       |  8200.00 |
|         121 | Fripp      |  8200.00 |
|         206 | Gietz      |  8300.00 |
|         177 | Livingston |  8400.00 |
|         176 | Taylor     |  8600.00 |
|         175 | Hutton     |  8800.00 |
|         103 | Hunold     |  9000.00 |
|         109 | Faviet     |  9000.00 |
|         158 | McEwen     |  9000.00 |
|         152 | Hall       |  9000.00 |
|         157 | Sully      |  9500.00 |
|         151 | Bernstein  |  9500.00 |
|         163 | Greene     |  9500.00 |
|         170 | Fox        |  9600.00 |
|         156 | King       | 10000.00 |
|         150 | Tucker     | 10000.00 |
|         204 | Baer       | 10000.00 |
|         169 | Bloom      | 10000.00 |
|         149 | Zlotkey    | 10500.00 |
|         162 | Vishney    | 10500.00 |
|         148 | Cambrault  | 11000.00 |
|         174 | Abel       | 11000.00 |
|         168 | Ozer       | 11500.00 |
|         108 | Greenberg  | 12000.00 |
|         147 | Errazuriz  | 12000.00 |
|         205 | Higgins    | 12000.00 |
|         201 | Hartstein  | 13000.00 |
|         146 | Partners   | 13500.00 |
|         145 | Russell    | 14000.00 |
|         113 | Popp       | 16900.00 |
|         114 | Raphaely   | 16900.00 |
|         101 | Kochhar    | 17000.00 |
|         102 | De Haan    | 17000.00 |
|         100 | King       | 24500.00 |
+-------------+------------+----------+
49 rows in set (0.00 sec)


27.	Write a query that displays the employee number and last name of all employees who work in a department with any employee whose last name contains the letter “u.” 

select employee_id, last_name from employees where department_id in (select department_id from employees where regexp_like(last_name,'u'));

mysql> select employee_id, last_name from employees where department_id in (select department_id from employees where regexp_like(last_name,'u'));
+-------------+-------------+
| employee_id | last_name   |
+-------------+-------------+
|         103 | Hunold      |
|         104 | Ernst       |
|         105 | Austin      |
|         106 | Pataballa   |
|         107 | Lorentz     |
|         108 | Greenberg   |
|         109 | Faviet      |
|         110 | Chen        |
|         111 | Sciarra     |
|         112 | Urman       |
|         113 | Popp        |
|         114 | Raphaely    |
|         115 | Khoo        |
|         116 | Baida       |
|         117 | Tobias      |
|         118 | Himuro      |
|         119 | Colmenares  |
|         120 | Weiss       |
|         121 | Fripp       |
|         122 | Kaufling    |
|         123 | Vollman     |
|         124 | Mourgos     |
|         125 | Nayer       |
|         126 | Mikkilineni |
|         127 | Landry      |
|         128 | Markle      |
|         129 | Bissot      |
|         130 | Atkinson    |
|         131 | Marlow      |
|         132 | Olson       |
|         133 | Mallin      |
|         134 | Rogers      |
|         135 | Gee         |
|         136 | Philtanker  |
|         137 | Ladwig      |
|         138 | Stiles      |
|         139 | Seo         |
|         140 | Patel       |
|         141 | Rajs        |
|         142 | Davies      |
|         143 | Matos       |
|         144 | Vargas      |
|         145 | Russell     |
|         146 | Partners    |
|         147 | Errazuriz   |
|         148 | Cambrault   |
|         149 | Zlotkey     |
|         150 | Tucker      |
|         151 | Bernstein   |
|         152 | Hall        |
|         153 | Olsen       |
|         154 | Cambrault   |
|         155 | Tuvault     |
|         156 | King        |
|         157 | Sully       |
|         158 | McEwen      |
|         159 | Smith       |
|         160 | Doran       |
|         161 | Sewall      |
|         162 | Vishney     |
|         163 | Greene      |
|         164 | Marvins     |
|         165 | Lee         |
|         166 | Ande        |
|         167 | Banda       |
|         168 | Ozer        |
|         169 | Bloom       |
|         170 | Fox         |
|         171 | Smith       |
|         172 | Bates       |
|         173 | Kumar       |
|         174 | Abel        |
|         175 | Hutton      |
|         176 | Taylor      |
|         177 | Livingston  |
|         179 | Johnson     |
|         180 | Taylor      |
|         181 | Fleaur      |
|         182 | Sullivan    |
|         183 | Geoni       |
|         184 | Sarchand    |
|         185 | Bull        |
|         186 | Dellinger   |
|         187 | Cabrio      |
|         188 | Chung       |
|         189 | Dilly       |
|         190 | Gates       |
|         191 | Perkins     |
|         192 | Bell        |
|         193 | Everett     |
|         194 | McCain      |
|         195 | Jones       |
|         196 | Walsh       |
|         197 | Feeney      |
|         198 | OConnell    |
|         199 | Grant       |
+-------------+-------------+
96 rows in set (0.02 sec)

28.	The HR department needs a report that displays the last name, department number, and job ID of all employees whose department location ID is 1700.

select last_name, department_id, job_id from employees where department_id in (select department_id from departments where location_id=1700);

mysql> select last_name, department_id, job_id from employees where department_id in (select department_id from departments where location_id=1700);
+------------+---------------+------------+
| last_name  | department_id | job_id     |
+------------+---------------+------------+
| Whalen     |            10 | AD_ASST    |
| Raphaely   |            30 | AD_VP      |
| Khoo       |            30 | AD_VP      |
| Baida      |            30 | PU_CLERK   |
| Tobias     |            30 | PU_CLERK   |
| Himuro     |            30 | PU_CLERK   |
| Colmenares |            30 | PU_CLERK   |
| King       |            90 | AD_PRES    |
| Kochhar    |            90 | AD_VP      |
| De Haan    |            90 | AD_VP      |
| Greenberg  |           100 | FI_MGR     |
| Faviet     |           100 | FI_ACCOUNT |
| Chen       |           100 | FI_ACCOUNT |
| Sciarra    |           100 | FI_ACCOUNT |
| Urman      |           100 | FI_ACCOUNT |
| Popp       |           100 | AD_VP      |
| Higgins    |           110 | AC_MGR     |
| Gietz      |           110 | AC_ACCOUNT |
+------------+---------------+------------+
18 rows in set (0.00 sec)



29.	Create a report for HR that displays the last name and salary of every employee who reports to King.

select last_name, salary from employees where manager_id in (select employee_id from employees where last_name = 'King');


mysql> select last_name, salary from employees where manager_id in (select employee_id from employees where last_name = 'King');
+-----------+----------+
| last_name | salary   |
+-----------+----------+
| Kochhar   | 17000.00 |
| De Haan   | 17000.00 |
| Raphaely  | 16900.00 |
| Weiss     |  8000.00 |
| Fripp     |  8200.00 |
| Kaufling  |  7900.00 |
| Vollman   |  6500.00 |
| Mourgos   |  5800.00 |
| Russell   | 14000.00 |
| Partners  | 13500.00 |
| Errazuriz | 12000.00 |
| Cambrault | 11000.00 |
| Zlotkey   | 10500.00 |
| Hartstein | 13000.00 |
+-----------+----------+
14 rows in set (0.00 sec)


30.	Create a report for HR that displays the department number, last name, and job ID for every employee in the Executive department.

select department_id, last_name, job_id from employees where department_id in (select department_id from departments where department_name = 'Executive');

mysql> select department_id, last_name, job_id from employees where department_id in (select department_id from departments where department_name = 'Executive');
+---------------+-----------+---------+
| department_id | last_name | job_id  |
+---------------+-----------+---------+
|            90 | King      | AD_PRES |
|            90 | Kochhar   | AD_VP   |
|            90 | De Haan   | AD_VP   |
+---------------+-----------+---------+
3 rows in set (0.00 sec)


31.	Create a report that displays a list of all employees whose salary is more than the salary of any employee from department 60.

select first_name, last_name, salary from employees where salary > (select min(salary) from employees where department_id=60);

mysql> select first_name, last_name, salary from employees where salary > (select min(salary) from employees where department_id=60);
+-------------+------------+----------+
| first_name  | last_name  | salary   |
+-------------+------------+----------+
| Steven      | King       | 24500.00 |
| Neena       | Kochhar    | 17000.00 |
| Lex         | De Haan    | 17000.00 |
| Alexander   | Hunold     |  9000.00 |
| Bruce       | Ernst      |  6000.00 |
| David       | Austin     |  4800.00 |
| Valli       | Pataballa  |  4800.00 |
| Nancy       | Greenberg  | 12000.00 |
| Daniel      | Faviet     |  9000.00 |
| John        | Chen       |  8200.00 |
| Ismael      | Sciarra    |  7500.00 |
| Jose Manuel | Urman      |  7800.00 |
| Luis        | Popp       | 16900.00 |
| Den         | Raphaely   | 16900.00 |
| Matthew     | Weiss      |  8000.00 |
| Adam        | Fripp      |  8200.00 |
| Payam       | Kaufling   |  7900.00 |
| Shanta      | Vollman    |  6500.00 |
| Kevin       | Mourgos    |  5800.00 |
| John        | Russell    | 14000.00 |
| Karen       | Partners   | 13500.00 |
| Alberto     | Errazuriz  | 12000.00 |
| Gerald      | Cambrault  | 11000.00 |
| Eleni       | Zlotkey    | 10500.00 |
| Peter       | Tucker     | 10000.00 |
| David       | Bernstein  |  9500.00 |
| Peter       | Hall       |  9000.00 |
| Christopher | Olsen      |  8000.00 |
| Nanette     | Cambrault  |  7500.00 |
| Oliver      | Tuvault    |  7000.00 |
| Janette     | King       | 10000.00 |
| Patrick     | Sully      |  9500.00 |
| Allan       | McEwen     |  9000.00 |
| Lindsey     | Smith      |  8000.00 |
| Louise      | Doran      |  7500.00 |
| Sarath      | Sewall     |  7000.00 |
| Clara       | Vishney    | 10500.00 |
| Danielle    | Greene     |  9500.00 |
| Mattea      | Marvins    |  7200.00 |
| David       | Lee        |  6800.00 |
| Sundar      | Ande       |  6400.00 |
| Amit        | Banda      |  6200.00 |
| Lisa        | Ozer       | 11500.00 |
| Harrison    | Bloom      | 10000.00 |
| Tayler      | Fox        |  9600.00 |
| William     | Smith      |  7400.00 |
| Elizabeth   | Bates      |  7300.00 |
| Sundita     | Kumar      |  6100.00 |
| Ellen       | Abel       | 11000.00 |
| Alyssa      | Hutton     |  8800.00 |
| Jonathon    | Taylor     |  8600.00 |
| Jack        | Livingston |  8400.00 |
| Kimberely   | Grant      |  7000.00 |
| Charles     | Johnson    |  6200.00 |
| Jennifer    | Whalen     |  4400.00 |
| Michael     | Hartstein  | 13000.00 |
| Pat         | Fay        |  6000.00 |
| Susan       | Mavris     |  6500.00 |
| Hermann     | Baer       | 10000.00 |
| Shelley     | Higgins    | 12000.00 |
| William     | Gietz      |  8300.00 |
+-------------+------------+----------+
61 rows in set (0.00 sec)

32.	Modify above query in display the employee number, last name, and salary of all employees who earn more than the average salary and who work in a department with any employee whose last_name contains letter 'u'.

select employee_id ,first_name, last_name, salary from employees where salary > (select min(salary) from employees where department_id=60) and department_id in (select department_id from employees where regexp_like(last_name,'u'));

mysql> select employee_id ,first_name, last_name, salary from employees where salary > (select min(salary) from employees where department_id=60) and department_id in (select department_id from employees where regexp_like(last_name,'u'));
+-------------+-------------+------------+----------+
| employee_id | first_name  | last_name  | salary   |
+-------------+-------------+------------+----------+
|         103 | Alexander   | Hunold     |  9000.00 |
|         104 | Bruce       | Ernst      |  6000.00 |
|         105 | David       | Austin     |  4800.00 |
|         106 | Valli       | Pataballa  |  4800.00 |
|         108 | Nancy       | Greenberg  | 12000.00 |
|         109 | Daniel      | Faviet     |  9000.00 |
|         110 | John        | Chen       |  8200.00 |
|         111 | Ismael      | Sciarra    |  7500.00 |
|         112 | Jose Manuel | Urman      |  7800.00 |
|         113 | Luis        | Popp       | 16900.00 |
|         114 | Den         | Raphaely   | 16900.00 |
|         120 | Matthew     | Weiss      |  8000.00 |
|         121 | Adam        | Fripp      |  8200.00 |
|         122 | Payam       | Kaufling   |  7900.00 |
|         123 | Shanta      | Vollman    |  6500.00 |
|         124 | Kevin       | Mourgos    |  5800.00 |
|         145 | John        | Russell    | 14000.00 |
|         146 | Karen       | Partners   | 13500.00 |
|         147 | Alberto     | Errazuriz  | 12000.00 |
|         148 | Gerald      | Cambrault  | 11000.00 |
|         149 | Eleni       | Zlotkey    | 10500.00 |
|         150 | Peter       | Tucker     | 10000.00 |
|         151 | David       | Bernstein  |  9500.00 |
|         152 | Peter       | Hall       |  9000.00 |
|         153 | Christopher | Olsen      |  8000.00 |
|         154 | Nanette     | Cambrault  |  7500.00 |
|         155 | Oliver      | Tuvault    |  7000.00 |
|         156 | Janette     | King       | 10000.00 |
|         157 | Patrick     | Sully      |  9500.00 |
|         158 | Allan       | McEwen     |  9000.00 |
|         159 | Lindsey     | Smith      |  8000.00 |
|         160 | Louise      | Doran      |  7500.00 |
|         161 | Sarath      | Sewall     |  7000.00 |
|         162 | Clara       | Vishney    | 10500.00 |
|         163 | Danielle    | Greene     |  9500.00 |
|         164 | Mattea      | Marvins    |  7200.00 |
|         165 | David       | Lee        |  6800.00 |
|         166 | Sundar      | Ande       |  6400.00 |
|         167 | Amit        | Banda      |  6200.00 |
|         168 | Lisa        | Ozer       | 11500.00 |
|         169 | Harrison    | Bloom      | 10000.00 |
|         170 | Tayler      | Fox        |  9600.00 |
|         171 | William     | Smith      |  7400.00 |
|         172 | Elizabeth   | Bates      |  7300.00 |
|         173 | Sundita     | Kumar      |  6100.00 |
|         174 | Ellen       | Abel       | 11000.00 |
|         175 | Alyssa      | Hutton     |  8800.00 |
|         176 | Jonathon    | Taylor     |  8600.00 |
|         177 | Jack        | Livingston |  8400.00 |
|         179 | Charles     | Johnson    |  6200.00 |
+-------------+-------------+------------+----------+
50 rows in set (0.00 sec)



------------------------------------: Using Set Operators :--------------------------

33.	The HR department needs a list of department IDs for departments that do not contain the job ID ST_CLERK. Use the set operators to create this report.

select department_id from employees where job_id not in ('ST_CLERK') 
intersect
select department_id from departments;

mysql> select department_id from employees where job_id not in ('ST_CLERK')
    -> intersect
    -> select department_id from departments;
+---------------+
| department_id |
+---------------+
|            90 |
|            60 |
|           100 |
|            30 |
|            50 |
|            80 |
|            10 |
|            20 |
|            40 |
|            70 |
|           110 |
+---------------+
11 rows in set (0.00 sec)

34.	The HR department needs a list of countries that have no departments located in them. Display the country IDs and the names of the countries. Use the set operators to create this report.

select country_id"country IDs",country_name from countries 
where country_id not in (select l.country_id"country IDs" from locations l join departments d on l.location_id=d.location_id); 

select country_id"country IDs",country_name"counrty Name" from countries 
except
select l.country_id"country IDs",c.country_name"counrty Name" from locations l join departments d join countries c on l.location_id=d.location_id and c.country_id=l.country_id; 


mysql> select country_id"country IDs",country_name from countries
    -> where country_id not in (select l.country_id"country IDs" from locations l join departments d on l.location_id=d.location_id);
+-------------+--------------+
| country IDs | country_name |
+-------------+--------------+
| AR          | Argentina    |
| AU          | Australia    |
| BE          | Belgium      |
| BR          | Brazil       |
| CH          | Switzerland  |
| CN          | China        |
| DK          | Denmark      |
| EG          | Egypt        |
| FR          | France       |
| HK          | HongKong     |
| IL          | Israel       |
| IN          | India        |
| IT          | Italy        |
| JP          | Japan        |
| KW          | Kuwait       |
| MX          | Mexico       |
| NG          | Nigeria      |
| NL          | Netherlands  |
| SG          | Singapore    |
| ZM          | Zambia       |
| ZW          | Zimbabwe     |
+-------------+--------------+
21 rows in set (0.00 sec)

mysql> select country_id"country IDs",country_name"counrty Name" from countries
    -> except
    -> select l.country_id"country IDs",c.country_name"counrty Name" from locations l join departments d join countries c on l.location_id=d.location_id and c.country_id=l.country_id;
+-------------+--------------+
| country IDs | counrty Name |
+-------------+--------------+
| AR          | Argentina    |
| AU          | Australia    |
| BE          | Belgium      |
| BR          | Brazil       |
| CH          | Switzerland  |
| CN          | China        |
| DK          | Denmark      |
| EG          | Egypt        |
| FR          | France       |
| HK          | HongKong     |
| IL          | Israel       |
| IN          | India        |
| IT          | Italy        |
| JP          | Japan        |
| KW          | Kuwait       |
| MX          | Mexico       |
| NG          | Nigeria      |
| NL          | Netherlands  |
| SG          | Singapore    |
| ZM          | Zambia       |
| ZW          | Zimbabwe     |
+-------------+--------------+
21 rows in set (0.00 sec)

35.	Produce a list of all the employees who work in departments 50 and 80. Display the employee ID, job ID, and department ID by using the set operators.

select employee_id"employee ID", job_id"job ID", department_id"department ID" from employees
intersect
select employee_id"employee ID", job_id"job ID", department_id"department ID" from employees where department_id in (50,80);

mysql> select employee_id"employee ID", job_id"job ID", department_id"department ID" from employees
    -> intersect
    -> select employee_id"employee ID", job_id"job ID", department_id"department ID" from employees where department_id in (50,80);
+-------------+----------+---------------+
| employee ID | job ID   | department ID |
+-------------+----------+---------------+
|         120 | ST_MAN   |            50 |
|         121 | ST_MAN   |            50 |
|         122 | ST_MAN   |            50 |
|         123 | ST_MAN   |            50 |
|         124 | ST_MAN   |            50 |
|         125 | ST_CLERK |            50 |
|         126 | ST_CLERK |            50 |
|         127 | ST_CLERK |            50 |
|         128 | ST_CLERK |            50 |
|         129 | ST_CLERK |            50 |
|         130 | ST_CLERK |            50 |
|         131 | ST_CLERK |            50 |
|         132 | ST_CLERK |            50 |
|         133 | ST_CLERK |            50 |
|         134 | ST_CLERK |            50 |
|         135 | ST_CLERK |            50 |
|         136 | ST_CLERK |            50 |
|         137 | ST_CLERK |            50 |
|         138 | ST_CLERK |            50 |
|         139 | ST_CLERK |            50 |
|         140 | ST_CLERK |            50 |
|         141 | ST_CLERK |            50 |
|         142 | ST_CLERK |            50 |
|         143 | ST_CLERK |            50 |
|         144 | ST_CLERK |            50 |
|         145 | SA_MAN   |            80 |
|         146 | SA_MAN   |            80 |
|         147 | SA_MAN   |            80 |
|         148 | SA_MAN   |            80 |
|         149 | SA_MAN   |            80 |
|         150 | SA_REP   |            80 |
|         151 | SA_REP   |            80 |
|         152 | SA_REP   |            80 |
|         153 | SA_REP   |            80 |
|         154 | SA_REP   |            80 |
|         155 | SA_REP   |            80 |
|         156 | SA_REP   |            80 |
|         157 | SA_REP   |            80 |
|         158 | SA_REP   |            80 |
|         159 | SA_REP   |            80 |
|         160 | SA_REP   |            80 |
|         161 | SA_REP   |            80 |
|         162 | SA_REP   |            80 |
|         163 | SA_REP   |            80 |
|         164 | SA_REP   |            80 |
|         165 | SA_REP   |            80 |
|         166 | SA_REP   |            80 |
|         167 | SA_REP   |            80 |
|         168 | SA_REP   |            80 |
|         169 | SA_REP   |            80 |
|         170 | SA_REP   |            80 |
|         171 | SA_REP   |            80 |
|         172 | SA_REP   |            80 |
|         173 | SA_REP   |            80 |
|         174 | SA_REP   |            80 |
|         175 | SA_REP   |            80 |
|         176 | SA_REP   |            80 |
|         177 | SA_REP   |            80 |
|         179 | SA_REP   |            80 |
|         180 | SH_CLERK |            50 |
|         181 | SH_CLERK |            50 |
|         182 | SH_CLERK |            50 |
|         183 | SH_CLERK |            50 |
|         184 | SH_CLERK |            50 |
|         185 | SH_CLERK |            50 |
|         186 | SH_CLERK |            50 |
|         187 | SH_CLERK |            50 |
|         188 | SH_CLERK |            50 |
|         189 | SH_CLERK |            50 |
|         190 | SH_CLERK |            50 |
|         191 | SH_CLERK |            50 |
|         192 | SH_CLERK |            50 |
|         193 | SH_CLERK |            50 |
|         194 | SH_CLERK |            50 |
|         195 | SH_CLERK |            50 |
|         196 | SH_CLERK |            50 |
|         197 | SH_CLERK |            50 |
|         198 | SH_CLERK |            50 |
|         199 | SH_CLERK |            50 |
+-------------+----------+---------------+
79 rows in set (0.00 sec)



36.	Create a report that lists the detail of all employees who are sales representatives and are currently working in the sales department.

select e.employee_id, e.first_name from employees e join jobs j on e.job_id=j.job_id and j.job_title = 'Sales Representative'
intersect
select e.employee_id, e.first_name from employees e join departments d on e.department_id=d.department_id and d.department_name = 'sales';

mysql> select e.employee_id, e.first_name from employees e join jobs j on e.job_id=j.job_id and j.job_title = 'Sales Representative'
    -> intersect
    -> select e.employee_id, e.first_name from employees e join departments d on e.department_id=d.department_id and d.department_name = 'sales';
+-------------+-------------+
| employee_id | first_name  |
+-------------+-------------+
|         150 | Peter       |
|         151 | David       |
|         152 | Peter       |
|         153 | Christopher |
|         154 | Nanette     |
|         155 | Oliver      |
|         156 | Janette     |
|         157 | Patrick     |
|         158 | Allan       |
|         159 | Lindsey     |
|         160 | Louise      |
|         161 | Sarath      |
|         162 | Clara       |
|         163 | Danielle    |
|         164 | Mattea      |
|         165 | David       |
|         166 | Sundar      |
|         167 | Amit        |
|         168 | Lisa        |
|         169 | Harrison    |
|         170 | Tayler      |
|         171 | William     |
|         172 | Elizabeth   |
|         173 | Sundita     |
|         174 | Ellen       |
|         175 | Alyssa      |
|         176 | Jonathon    |
|         177 | Jack        |
|         179 | Charles     |
+-------------+-------------+
29 rows in set (0.00 sec)



----------------------------------------Managing Tables by Using DML Statements-------------------------------------------
Insert data into the MY_EMPLOYEE table.
37.	Create a table called MY_EMPLOYEE.

CREATE TABLE my_employee
(	id int ,
	last_name VARCHAR(25),
	first_name VARCHAR(25),
	userid VARCHAR(8),
	salary decimal(9,2),
	CONSTRAINT my_employee_id_pk PRIMARY Key(id)
);



38.	Create an INSERT statement to add the first row of data to the MY_EMPLOYEE table from the following sample data. Do not list the columns in the INSERT clause.

ID	LAST_NAME	FIRST_NAME	USERID	SALARY
1	Patel	Ralph	rpatel	895
2	Dancs	Betty	bdancs	860
3	Biri	Ben	bbiri	1100
4	Newman	Chad	cnewman	750
5	Ropeburn	Audrey	aropebur	1550

pass values to id last_name,first_name and salary and generate userid as given

delimiter #
drop trigger if exists bf_insert; 
create trigger bf_insert
before insert
on my_employee
for each row
begin
	set new.userid=lower(concat(substring(new.last_name,1,1),new.first_name));
end #
delimiter ;



insert into my_employee(id,last_name,first_name,salary) values
(1,'Patel','Ralph',895),
(2,'Dancs','Betty',860),
(3,'Biri','Ben',1100),
(4,'Newman','Chad',750),
(5,'Ropeburn','Audrey',1550);


mysql> delimiter #
mysql> drop trigger if exists bf_insert;
    -> create trigger bf_insert
    -> before insert
    -> on my_employee
    -> for each row
    -> begin
    ->  set new.userid=lower(concat(substring(new.last_name,1,1),new.first_name));
    -> end #
Query OK, 0 rows affected, 1 warning (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql>
mysql>
mysql> insert into my_employee(id,last_name,first_name,salary) values
    -> (1,'Patel','Ralph',895),
    -> (2,'Dancs','Betty',860),
    -> (3,'Biri','Ben',1100),
    -> (4,'Newman','Chad',750),
    -> (5,'Ropeburn','Audrey',1550);
Query OK, 5 rows affected (0.00 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from my_employee;
+----+-----------+------------+---------+---------+
| id | last_name | first_name | userid  | salary  |
+----+-----------+------------+---------+---------+
|  1 | Patel     | Ralph      | pralph  |  895.00 |
|  2 | Dancs     | Betty      | dbetty  |  860.00 |
|  3 | Biri      | Ben        | bben    | 1100.00 |
|  4 | Newman    | Chad       | nchad   |  750.00 |
|  5 | Ropeburn  | Audrey     | raudrey | 1550.00 |
+----+-----------+------------+---------+---------+
5 rows in set (0.00 sec)





------------------------------------- procedure ----------------------
1. Retrieve Employees by Manager
Objective: Create a stored procedure that retrieves all employees under a specific manager.

Input: p_manager_id IN NUMBER (Manager's employee ID)
Output: List of employees with their details (Employee ID, First Name, Last Name, Job Title, Salary)
Business Logic: The procedure should return employees whose manager_id matches the given p_manager_id.


delimiter #
drop procedure if exists procedure_emps_under_manager;
create procedure procedure_emps_under_manager(man_id int)
begin
	select employee_id,first_name, last_name from employees where manager_id=man_id; 
end #
delimiter ;

call procedure_emps_under_manager(100);

mysql> delimiter #
mysql> drop procedure if exists procedure_emps_under_manager;
    -> create procedure procedure_emps_under_manager(man_id int)
    -> begin
    ->  select employee_id,first_name, last_name from employees where manager_id=man_id;
    -> end #
Query OK, 0 rows affected, 1 warning (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> call procedure_emps_under_manager(100);
+-------------+------------+-----------+
| employee_id | first_name | last_name |
+-------------+------------+-----------+
|         101 | Neena      | Kochhar   |
|         102 | Lex        | De Haan   |
|         114 | Den        | Raphaely  |
|         120 | Matthew    | Weiss     |
|         121 | Adam       | Fripp     |
|         122 | Payam      | Kaufling  |
|         123 | Shanta     | Vollman   |
|         124 | Kevin      | Mourgos   |
|         145 | John       | Russell   |
|         146 | Karen      | Partners  |
|         147 | Alberto    | Errazuriz |
|         148 | Gerald     | Cambrault |
|         149 | Eleni      | Zlotkey   |
|         201 | Michael    | Hartstein |
+-------------+------------+-----------+
14 rows in set (0.00 sec)

Query OK, 0 rows affected (0.02 sec)

mysql> call procedure_emps_under_manager(70);
Empty set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_emps_under_manager(101);
+-------------+------------+-----------+
| employee_id | first_name | last_name |
+-------------+------------+-----------+
|         108 | Nancy      | Greenberg |
|         200 | Jennifer   | Whalen    |
|         203 | Susan      | Mavris    |
|         204 | Hermann    | Baer      |
|         205 | Shelley    | Higgins   |
+-------------+------------+-----------+
5 rows in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)




2. Update Employee Salary
Objective: Create a stored procedure that updates the salary of a given employee based on their employee ID.
Input: p_employee_id IN NUMBER, p_new_salary IN NUMBER
Output: Success message or error message if the employee is not found.
Business Logic: The procedure should check if the employee exists and then update their salary. If the employee doesn't exist, return an error message.


delimiter #
drop procedure if exists procedure_newsal;
create procedure procedure_newsal(p_employee_id int, p_new_salary int)
begin
	if(p_employee_id = (select employee_id from employees where employee_id=p_employee_id))
	then
		update employees set salary = p_new_salary where employee_id=p_employee_id;
		select 'Salary Updated Successfully';
	else
		select 'ERROR : Employee Not Found';
	end if;
end #
delimiter ;

call procedure_newsal(100,24500);
call procedure_newsal(99,24500);
call procedure_newsal(111,7500);

mysql> delimiter ;
mysql> delimiter #
mysql> drop procedure if exists procedure_newsal;
    -> create procedure procedure_newsal(p_employee_id int, p_new_salary int)
    -> begin
    ->  if(p_employee_id = (select employee_id from employees where employee_id=p_employee_id))
    ->  then
    ->          update employees set salary = p_new_salary where employee_id=p_employee_id;
    ->          select 'Salary Updated Successfully';
    ->  else
    ->          select 'ERROR : Employee Not Found';
    ->  end if;
    -> end #
Query OK, 0 rows affected, 1 warning (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> call procedure_newsal(100,24500);
+-----------------------------+
| Salary Updated Successfully |
+-----------------------------+
| Salary Updated Successfully |
+-----------------------------+
1 row in set (0.01 sec)

Query OK, 0 rows affected (0.02 sec)

mysql> call procedure_newsal(99,24500);
+----------------------------+
| ERROR : Employee Not Found |
+----------------------------+
| ERROR : Employee Not Found |
+----------------------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> call procedure_newsal(111,7500);
+-----------------------------+
| Salary Updated Successfully |
+-----------------------------+
| Salary Updated Successfully |
+-----------------------------+
1 row in set (0.01 sec)

Query OK, 0 rows affected (0.01 sec)





3. Employee Count by Department
Objective: Create a stored procedure that returns the count of employees in a specific department.
Input: p_department_id IN NUMBER
Output: Count of employees in that department.
Business Logic: The procedure should count the employees in the specified department and return the result.

delimiter #
drop procedure if exists procedure_countemp;
create procedure procedure_countemp(p_department_id int)
begin
	select count(*) from employees where department_id = p_department_id;
end #
delimiter ;

call procedure_countemp(90);
call procedure_countemp(50);
call procedure_countemp(110);
call procedure_countemp(9);


mysql> delimiter #
mysql> drop procedure if exists procedure_countemp;
    -> create procedure procedure_countemp(p_department_id int)
    -> begin
    ->  select count(*) from employees where department_id = p_department_id;
    -> end #
Query OK, 0 rows affected, 1 warning (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql> call procedure_countemp(90);
+----------+
| count(*) |
+----------+
|        3 |
+----------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> call procedure_countemp(50);
+----------+
| count(*) |
+----------+
|       45 |
+----------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_countemp(110);
+----------+
| count(*) |
+----------+
|        2 |
+----------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_countemp(9);
+----------+
| count(*) |
+----------+
|        0 |
+----------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)


4. Employee Job Title and Salary Information
Objective: Create a stored procedure that retrieves employees' job titles and salary information based on a specific job title.
Input: p_job_id IN VARCHAR2
Output: List of employees with job title and salary.
Business Logic: The procedure should return the employee ID, first name, last name, and salary for employees with the specified job title.

delimiter #
drop procedure if exists procedure_jobtitle_salary;
create procedure procedure_jobtitle_salary(p_job_id varchar(20))
begin
	select j.job_title, e.salary from employees e join jobs j on e.job_id=j.job_id and e.job_id=p_job_id;
end #
delimiter ;

call procedure_jobtitle_salary('AD_VP');
call procedure_jobtitle_salary('IT_PROG');
call procedure_jobtitle_salary('ST_MAN');
call procedure_jobtitle_salary('SA_REP');
call procedure_jobtitle_salary('GAMER');

mysql> delimiter #
mysql> drop procedure if exists procedure_jobtitle_salary;
    -> create procedure procedure_jobtitle_salary(p_job_id varchar(20))
    -> begin
    ->  select j.job_title, e.salary from employees e join jobs j on e.job_id=j.job_id and e.job_id=p_job_id;
    -> end #
Query OK, 0 rows affected, 1 warning (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql> call procedure_jobtitle_salary('AD_VP');
+-------------------------------+----------+
| job_title                     | salary   |
+-------------------------------+----------+
| Administration Vice President | 17000.00 |
| Administration Vice President | 17000.00 |
+-------------------------------+----------+
2 rows in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> call procedure_jobtitle_salary('IT_PROG');
+------------+---------+
| job_title  | salary  |
+------------+---------+
| Programmer | 9000.00 |
| Programmer | 6000.00 |
| Programmer | 4800.00 |
| Programmer | 4800.00 |
| Programmer | 4200.00 |
+------------+---------+
5 rows in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> call procedure_jobtitle_salary('ST_MAN');
+---------------+---------+
| job_title     | salary  |
+---------------+---------+
| Stock Manager | 8000.00 |
| Stock Manager | 8200.00 |
| Stock Manager | 7900.00 |
| Stock Manager | 6500.00 |
| Stock Manager | 5800.00 |
+---------------+---------+
5 rows in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> call procedure_jobtitle_salary('SA_REP');
+----------------------+----------+
| job_title            | salary   |
+----------------------+----------+
| Sales Representative | 10000.00 |
| Sales Representative |  9500.00 |
| Sales Representative |  9000.00 |
| Sales Representative |  8000.00 |
| Sales Representative |  7500.00 |
| Sales Representative |  7000.00 |
| Sales Representative | 10000.00 |
| Sales Representative |  9500.00 |
| Sales Representative |  9000.00 |
| Sales Representative |  8000.00 |
| Sales Representative |  7500.00 |
| Sales Representative |  7000.00 |
| Sales Representative | 10500.00 |
| Sales Representative |  9500.00 |
| Sales Representative |  7200.00 |
| Sales Representative |  6800.00 |
| Sales Representative |  6400.00 |
| Sales Representative |  6200.00 |
| Sales Representative | 11500.00 |
| Sales Representative | 10000.00 |
| Sales Representative |  9600.00 |
| Sales Representative |  7400.00 |
| Sales Representative |  7300.00 |
| Sales Representative |  6100.00 |
| Sales Representative | 11000.00 |
| Sales Representative |  8800.00 |
| Sales Representative |  8600.00 |
| Sales Representative |  8400.00 |
| Sales Representative |  7000.00 |
| Sales Representative |  6200.00 |
+----------------------+----------+
30 rows in set (0.00 sec)

Query OK, 0 rows affected (0.04 sec)

mysql> call procedure_jobtitle_salary('GAMER');
Empty set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)




5. Promote Employee
Objective: Create a stored procedure to promote an employee by changing their job title and salary.
Input: p_employee_id IN NUMBER, p_new_job_id IN VARCHAR2, p_salary_increase IN NUMBER
Output: Success or failure message.
Business Logic: The procedure should check if the employee exists, and then update the job_id and salary based on the provided values. Ensure salary increase is not less than a certain percentage (e.g., 10%).


delimiter #
drop procedure if exists procedure_changejobsal;
create procedure procedure_changejobsal(p_employee_id int, p_new_job_id varchar(50),p_salary_increase int )
begin
	if((select employee_id from employees where employee_id=p_employee_id))
	then	
		if ((select count(*) from jobs where job_id=p_new_job_id))
		then 
			if p_salary_increase < 1.1*(select salary from employees where employee_id = p_employee_id)
			then 
				set p_salary_increase = 1.1*(select salary from employees where employee_id = p_employee_id);
			end if;
			update employees set job_id = p_new_job_id, salary=p_salary_increase where employee_id = p_employee_id;
			select 'Successfully Updated'as"Message";
		else
			select 'ERROR : Job Id Not Valid'as"Message";
		end if;
	else
		select 'ERROR : Employee Not Found'as"Message";
	end if;
end #
delimiter ;

select employee_id, first_name, job_id, salary from employees where employee_id=115;

call procedure_changejobsal(115,'AD_VP',3200);

select employee_id, first_name, job_id, salary from employees where employee_id=115;

mysql> delimiter #
mysql> drop procedure if exists procedure_changejobsal;
    -> create procedure procedure_changejobsal(p_employee_id int, p_new_job_id varchar(50),p_salary_increase int )
    -> begin
    ->  if((select employee_id from employees where employee_id=p_employee_id))
    ->  then
    ->          if ((select count(*) from jobs where job_id=p_new_job_id))
    ->          then
    ->                  if p_salary_increase < 1.1*(select salary from employees where employee_id = p_employee_id)
    ->                  then
    ->                          set p_salary_increase = 1.1*(select salary from employees where employee_id = p_employee_id);
    ->                  end if;
    ->                  update employees set job_id = p_new_job_id, salary=p_salary_increase where employee_id = p_employee_id;
    ->                  select 'Successfully Updated'as"Message";
    ->          else
    ->                  select 'ERROR : Job Id Not Valid'as"Message";
    ->          end if;
    ->  else
    ->          select 'ERROR : Employee Not Found'as"Message";
    ->  end if;
    -> end #
Query OK, 0 rows affected (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;

mysql> select employee_id, first_name, job_id, salary from employees where employee_id=114;
+-------------+------------+--------+----------+
| employee_id | first_name | job_id | salary   |
+-------------+------------+--------+----------+
|         114 | Den        | PU_MAN | 11000.00 |
+-------------+------------+--------+----------+
1 row in set (0.00 sec)

mysql>
mysql> call procedure_changejobsal(114,'AD_VP',16900);
+----------------------+
| Message              |
+----------------------+
| Successfully Updated |
+----------------------+
1 row in set (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql>
mysql> select employee_id, first_name, job_id, salary from employees where employee_id=114;
+-------------+------------+--------+----------+
| employee_id | first_name | job_id | salary   |
+-------------+------------+--------+----------+
|         114 | Den        | AD_VP  | 16900.00 |
+-------------+------------+--------+----------+
1 row in set (0.00 sec)

mysql> select employee_id, first_name, job_id, salary from employees where employee_id=115;
+-------------+------------+----------+---------+
| employee_id | first_name | job_id   | salary  |
+-------------+------------+----------+---------+
|         115 | Alexander  | PU_CLERK | 3100.00 |
+-------------+------------+----------+---------+
1 row in set (0.00 sec)

mysql>
mysql> call procedure_changejobsal(115,'AD_VP',3200);
+----------------------+
| Message              |
+----------------------+
| Successfully Updated |
+----------------------+
1 row in set (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql>
mysql> select employee_id, first_name, job_id, salary from employees where employee_id=115;
+-------------+------------+--------+---------+
| employee_id | first_name | job_id | salary  |
+-------------+------------+--------+---------+
|         115 | Alexander  | AD_VP  | 3410.00 |
+-------------+------------+--------+---------+
1 row in set (0.00 sec)




6. Employee Payroll Report
Objective: Create a stored procedure that generates a payroll report for a specific date range.
Input: p_start_date IN DATE, p_end_date IN DATE
Output: A list of employees along with their payroll details (Employee ID, Name, Job Title, Salary, Bonus, Total Pay).
Business Logic: The procedure should return payroll data (including salary and any bonuses) for employees who were active during the specified date range.


delimiter #
drop procedure if exists procedure_payroll;
create procedure procedure_payroll(p_start_date DATE, p_end_date DATE)
begin
	select e.employee_id"Employee ID",
	concat(e.first_name,' ',e.last_name) "Name",
	j.job_title"Job Title",
	e.salary"Salary",
	ifnull(e.commission_pct,0)*e.salary"Bonus",
	e.salary+e.salary*ifnull(e.commission_pct,0)"Total Pay" 
	from employees e join jobs j 
	on e.job_id=j.job_id 
	and 
	hire_date between p_start_date and p_end_date;
end #
delimiter ;

call procedure_payroll('1994-08-17', '1998-03-15');

mysql> delimiter #
mysql> drop procedure if exists procedure_payroll;
    -> create procedure procedure_payroll(p_start_date DATE, p_end_date DATE)
    -> begin
    ->  select e.employee_id"Employee ID",
    ->  concat(e.first_name,' ',e.last_name) "Name",
    ->  j.job_title"Job Title",
    ->  e.salary"Salary",
    ->  ifnull(e.commission_pct,0)*e.salary"Bonus",
    ->  e.salary+e.salary*ifnull(e.commission_pct,0)"Total Pay"
    ->  from employees e join jobs j
    ->  on e.job_id=j.job_id
    ->  and
    ->  hire_date between p_start_date and p_end_date;
    -> end #
Query OK, 0 rows affected (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> call procedure_payroll('1994-08-17', '1998-03-15');
+-------------+-------------------+-------------------------------+----------+-----------+------------+
| Employee ID | Name              | Job Title                     | Salary   | Bonus     | Total Pay  |
+-------------+-------------------+-------------------------------+----------+-----------+------------+
|         105 | David Austin      | Programmer                    |  4800.00 |    0.0000 |  4800.0000 |
|         106 | Valli Pataballa   | Programmer                    |  4800.00 |    0.0000 |  4800.0000 |
|         108 | Nancy Greenberg   | Finance Manager               | 12000.00 |    0.0000 | 12000.0000 |
|         110 | John Chen         | Accountant                    |  8200.00 |    0.0000 |  8200.0000 |
|         111 | Ismael Sciarra    | Accountant                    |  7500.00 |    0.0000 |  7500.0000 |
|         112 | Jose Manuel Urman | Accountant                    |  7800.00 |    0.0000 |  7800.0000 |
|         114 | Den Raphaely      | Administration Vice President | 16900.00 |    0.0000 | 16900.0000 |
|         115 | Alexander Khoo    | Administration Vice President |  3410.00 |    0.0000 |  3410.0000 |
|         116 | Shelli Baida      | Purchasing Clerk              |  2900.00 |    0.0000 |  2900.0000 |
|         117 | Sigal Tobias      | Purchasing Clerk              |  2800.00 |    0.0000 |  2800.0000 |
|         120 | Matthew Weiss     | Stock Manager                 |  8000.00 |    0.0000 |  8000.0000 |
|         121 | Adam Fripp        | Stock Manager                 |  8200.00 |    0.0000 |  8200.0000 |
|         122 | Payam Kaufling    | Stock Manager                 |  7900.00 |    0.0000 |  7900.0000 |
|         123 | Shanta Vollman    | Stock Manager                 |  6500.00 |    0.0000 |  6500.0000 |
|         125 | Julia Nayer       | Stock Clerk                   |  3200.00 |    0.0000 |  3200.0000 |
|         129 | Laura Bissot      | Stock Clerk                   |  3300.00 |    0.0000 |  3300.0000 |
|         130 | Mozhe Atkinson    | Stock Clerk                   |  2800.00 |    0.0000 |  2800.0000 |
|         131 | James Marlow      | Stock Clerk                   |  2500.00 |    0.0000 |  2500.0000 |
|         133 | Jason Mallin      | Stock Clerk                   |  3300.00 |    0.0000 |  3300.0000 |
|         137 | Renske Ladwig     | Stock Clerk                   |  3600.00 |    0.0000 |  3600.0000 |
|         138 | Stephen Stiles    | Stock Clerk                   |  3200.00 |    0.0000 |  3200.0000 |
|         139 | John Seo          | Stock Clerk                   |  2700.00 |    0.0000 |  2700.0000 |
|         141 | Trenna Rajs       | Stock Clerk                   |  3500.00 |    0.0000 |  3500.0000 |
|         142 | Curtis Davies     | Stock Clerk                   |  3100.00 |    0.0000 |  3100.0000 |
|         143 | Randall Matos     | Stock Clerk                   |  2600.00 |    0.0000 |  2600.0000 |
|         145 | John Russell      | Sales Manager                 | 14000.00 | 5600.0000 | 19600.0000 |
|         146 | Karen Partners    | Sales Manager                 | 13500.00 | 4050.0000 | 17550.0000 |
|         147 | Alberto Errazuriz | Sales Manager                 | 12000.00 | 3600.0000 | 15600.0000 |
|         150 | Peter Tucker      | Sales Representative          | 10000.00 | 3000.0000 | 13000.0000 |
|         151 | David Bernstein   | Sales Representative          |  9500.00 | 2375.0000 | 11875.0000 |
|         152 | Peter Hall        | Sales Representative          |  9000.00 | 2250.0000 | 11250.0000 |
|         156 | Janette King      | Sales Representative          | 10000.00 | 3500.0000 | 13500.0000 |
|         157 | Patrick Sully     | Sales Representative          |  9500.00 | 3325.0000 | 12825.0000 |
|         158 | Allan McEwen      | Sales Representative          |  9000.00 | 3150.0000 | 12150.0000 |
|         159 | Lindsey Smith     | Sales Representative          |  8000.00 | 2400.0000 | 10400.0000 |
|         160 | Louise Doran      | Sales Representative          |  7500.00 | 2250.0000 |  9750.0000 |
|         162 | Clara Vishney     | Sales Representative          | 10500.00 | 2625.0000 | 13125.0000 |
|         168 | Lisa Ozer         | Sales Representative          | 11500.00 | 2875.0000 | 14375.0000 |
|         170 | Tayler Fox        | Sales Representative          |  9600.00 | 1920.0000 | 11520.0000 |
|         174 | Ellen Abel        | Sales Representative          | 11000.00 | 3300.0000 | 14300.0000 |
|         175 | Alyssa Hutton     | Sales Representative          |  8800.00 | 2200.0000 | 11000.0000 |
|         180 | Winston Taylor    | Shipping Clerk                |  3200.00 |    0.0000 |  3200.0000 |
|         181 | Jean Fleaur       | Shipping Clerk                |  3100.00 |    0.0000 |  3100.0000 |
|         184 | Nandita Sarchand  | Shipping Clerk                |  4200.00 |    0.0000 |  4200.0000 |
|         185 | Alexis Bull       | Shipping Clerk                |  4100.00 |    0.0000 |  4100.0000 |
|         188 | Kelly Chung       | Shipping Clerk                |  3800.00 |    0.0000 |  3800.0000 |
|         189 | Jennifer Dilly    | Shipping Clerk                |  3600.00 |    0.0000 |  3600.0000 |
|         192 | Sarah Bell        | Shipping Clerk                |  4000.00 |    0.0000 |  4000.0000 |
|         193 | Britney Everett   | Shipping Clerk                |  3900.00 |    0.0000 |  3900.0000 |
|         201 | Michael Hartstein | Marketing Manager             | 13000.00 |    0.0000 | 13000.0000 |
|         202 | Pat Fay           | Marketing Representative      |  6000.00 |    0.0000 |  6000.0000 |
+-------------+-------------------+-------------------------------+----------+-----------+------------+
51 rows in set (0.00 sec)

Query OK, 0 rows affected (0.15 sec)

mysql> call procedure_payroll('1994-08-17', '1995-03-15');
+-------------+-----------------+-------------------------------+----------+--------+------------+
| Employee ID | Name            | Job Title                     | Salary   | Bonus  | Total Pay  |
+-------------+-----------------+-------------------------------+----------+--------+------------+
|         108 | Nancy Greenberg | Finance Manager               | 12000.00 | 0.0000 | 12000.0000 |
|         114 | Den Raphaely    | Administration Vice President | 16900.00 | 0.0000 | 16900.0000 |
+-------------+-----------------+-------------------------------+----------+--------+------------+
2 rows in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)


/// if we consider all employees who has joined before end date because they all are active not only one who join in between

delimiter #
drop procedure if exists procedure_payroll;
create procedure procedure_payroll(p_start_date DATE, p_end_date DATE)
begin
	select e.employee_id"Employee ID",
	concat(e.first_name,' ',e.last_name) "Name",
	j.job_title"Job Title",
	e.salary"Salary",
	ifnull(e.commission_pct,0)*e.salary"Bonus",
	e.salary+e.salary*ifnull(e.commission_pct,0)"Total Pay" 
	from employees e join jobs j 
	on e.job_id=j.job_id 
	and 
	hire_date < p_end_date;
end #
delimiter ;

call procedure_payroll('1994-08-17', '1998-03-15');

mysql> delimiter #
mysql> drop procedure if exists procedure_payroll;
    -> create procedure procedure_payroll(p_start_date DATE, p_end_date DATE)
    -> begin
    ->  select e.employee_id"Employee ID",
    ->  concat(e.first_name,' ',e.last_name) "Name",
    ->  j.job_title"Job Title",
    ->  e.salary"Salary",
    ->  ifnull(e.commission_pct,0)*e.salary"Bonus",
    ->  e.salary+e.salary*ifnull(e.commission_pct,0)"Total Pay"
    ->  from employees e join jobs j
    ->  on e.job_id=j.job_id
    ->  and
    ->  hire_date < p_end_date;
    -> end #
Query OK, 0 rows affected (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql> call procedure_payroll('1994-08-17', '1998-03-15');
+-------------+-------------------+---------------------------------+----------+-----------+------------+
| Employee ID | Name              | Job Title                       | Salary   | Bonus     | Total Pay  |
+-------------+-------------------+---------------------------------+----------+-----------+------------+
|         100 | Steven King       | President                       | 24500.00 |    0.0000 | 24500.0000 |
|         101 | Neena Kochhar     | Administration Vice President   | 17000.00 |    0.0000 | 17000.0000 |
|         102 | Lex De Haan       | Administration Vice President   | 17000.00 |    0.0000 | 17000.0000 |
|         103 | Alexander Hunold  | Programmer                      |  9000.00 |    0.0000 |  9000.0000 |
|         104 | Bruce Ernst       | Programmer                      |  6000.00 |    0.0000 |  6000.0000 |
|         105 | David Austin      | Programmer                      |  4800.00 |    0.0000 |  4800.0000 |
|         106 | Valli Pataballa   | Programmer                      |  4800.00 |    0.0000 |  4800.0000 |
|         108 | Nancy Greenberg   | Finance Manager                 | 12000.00 |    0.0000 | 12000.0000 |
|         109 | Daniel Faviet     | Accountant                      |  9000.00 |    0.0000 |  9000.0000 |
|         110 | John Chen         | Accountant                      |  8200.00 |    0.0000 |  8200.0000 |
|         111 | Ismael Sciarra    | Accountant                      |  7500.00 |    0.0000 |  7500.0000 |
|         112 | Jose Manuel Urman | Accountant                      |  7800.00 |    0.0000 |  7800.0000 |
|         114 | Den Raphaely      | Administration Vice President   | 16900.00 |    0.0000 | 16900.0000 |
|         115 | Alexander Khoo    | Administration Vice President   |  3410.00 |    0.0000 |  3410.0000 |
|         116 | Shelli Baida      | Purchasing Clerk                |  2900.00 |    0.0000 |  2900.0000 |
|         117 | Sigal Tobias      | Purchasing Clerk                |  2800.00 |    0.0000 |  2800.0000 |
|         120 | Matthew Weiss     | Stock Manager                   |  8000.00 |    0.0000 |  8000.0000 |
|         121 | Adam Fripp        | Stock Manager                   |  8200.00 |    0.0000 |  8200.0000 |
|         122 | Payam Kaufling    | Stock Manager                   |  7900.00 |    0.0000 |  7900.0000 |
|         123 | Shanta Vollman    | Stock Manager                   |  6500.00 |    0.0000 |  6500.0000 |
|         125 | Julia Nayer       | Stock Clerk                     |  3200.00 |    0.0000 |  3200.0000 |
|         129 | Laura Bissot      | Stock Clerk                     |  3300.00 |    0.0000 |  3300.0000 |
|         130 | Mozhe Atkinson    | Stock Clerk                     |  2800.00 |    0.0000 |  2800.0000 |
|         131 | James Marlow      | Stock Clerk                     |  2500.00 |    0.0000 |  2500.0000 |
|         133 | Jason Mallin      | Stock Clerk                     |  3300.00 |    0.0000 |  3300.0000 |
|         137 | Renske Ladwig     | Stock Clerk                     |  3600.00 |    0.0000 |  3600.0000 |
|         138 | Stephen Stiles    | Stock Clerk                     |  3200.00 |    0.0000 |  3200.0000 |
|         139 | John Seo          | Stock Clerk                     |  2700.00 |    0.0000 |  2700.0000 |
|         141 | Trenna Rajs       | Stock Clerk                     |  3500.00 |    0.0000 |  3500.0000 |
|         142 | Curtis Davies     | Stock Clerk                     |  3100.00 |    0.0000 |  3100.0000 |
|         145 | John Russell      | Sales Manager                   | 14000.00 | 5600.0000 | 19600.0000 |
|         146 | Karen Partners    | Sales Manager                   | 13500.00 | 4050.0000 | 17550.0000 |
|         147 | Alberto Errazuriz | Sales Manager                   | 12000.00 | 3600.0000 | 15600.0000 |
|         150 | Peter Tucker      | Sales Representative            | 10000.00 | 3000.0000 | 13000.0000 |
|         151 | David Bernstein   | Sales Representative            |  9500.00 | 2375.0000 | 11875.0000 |
|         152 | Peter Hall        | Sales Representative            |  9000.00 | 2250.0000 | 11250.0000 |
|         156 | Janette King      | Sales Representative            | 10000.00 | 3500.0000 | 13500.0000 |
|         157 | Patrick Sully     | Sales Representative            |  9500.00 | 3325.0000 | 12825.0000 |
|         158 | Allan McEwen      | Sales Representative            |  9000.00 | 3150.0000 | 12150.0000 |
|         159 | Lindsey Smith     | Sales Representative            |  8000.00 | 2400.0000 | 10400.0000 |
|         160 | Louise Doran      | Sales Representative            |  7500.00 | 2250.0000 |  9750.0000 |
|         162 | Clara Vishney     | Sales Representative            | 10500.00 | 2625.0000 | 13125.0000 |
|         168 | Lisa Ozer         | Sales Representative            | 11500.00 | 2875.0000 | 14375.0000 |
|         170 | Tayler Fox        | Sales Representative            |  9600.00 | 1920.0000 | 11520.0000 |
|         174 | Ellen Abel        | Sales Representative            | 11000.00 | 3300.0000 | 14300.0000 |
|         175 | Alyssa Hutton     | Sales Representative            |  8800.00 | 2200.0000 | 11000.0000 |
|         180 | Winston Taylor    | Shipping Clerk                  |  3200.00 |    0.0000 |  3200.0000 |
|         181 | Jean Fleaur       | Shipping Clerk                  |  3100.00 |    0.0000 |  3100.0000 |
|         184 | Nandita Sarchand  | Shipping Clerk                  |  4200.00 |    0.0000 |  4200.0000 |
|         185 | Alexis Bull       | Shipping Clerk                  |  4100.00 |    0.0000 |  4100.0000 |
|         188 | Kelly Chung       | Shipping Clerk                  |  3800.00 |    0.0000 |  3800.0000 |
|         189 | Jennifer Dilly    | Shipping Clerk                  |  3600.00 |    0.0000 |  3600.0000 |
|         192 | Sarah Bell        | Shipping Clerk                  |  4000.00 |    0.0000 |  4000.0000 |
|         193 | Britney Everett   | Shipping Clerk                  |  3900.00 |    0.0000 |  3900.0000 |
|         200 | Jennifer Whalen   | Administration Assistant        |  4400.00 |    0.0000 |  4400.0000 |
|         201 | Michael Hartstein | Marketing Manager               | 13000.00 |    0.0000 | 13000.0000 |
|         202 | Pat Fay           | Marketing Representative        |  6000.00 |    0.0000 |  6000.0000 |
|         203 | Susan Mavris      | Human Resources Representative  |  6500.00 |    0.0000 |  6500.0000 |
|         204 | Hermann Baer      | Public Relations Representative | 10000.00 |    0.0000 | 10000.0000 |
|         205 | Shelley Higgins   | Accounting Manager              | 12000.00 |    0.0000 | 12000.0000 |
|         206 | William Gietz     | Public Accountant               |  8300.00 |    0.0000 |  8300.0000 |
+-------------+-------------------+---------------------------------+----------+-----------+------------+
61 rows in set (0.00 sec)

Query OK, 0 rows affected (0.17 sec)




7. Employee Tenure
Objective: Create a stored procedure that calculates and returns the tenure (in years) for an employee based on their hire date.
Input: p_employee_id IN NUMBER
Output: Employee's tenure in years.
Business Logic: The procedure should calculate the difference between the current date and the employee's hire date, returning the number of years the employee has worked.

delimiter #
drop procedure if exists procedure_tenure;
create procedure procedure_tenure(p_employee_id int)
begin
	select employee_id "Employee ID",concat(first_name,' ',last_name) "Name",hire_date "HireDate", floor(datediff(curdate(),hire_date)/365) "Tenure" from employees where employee_id = p_employee_id; 
end #
delimiter ;

call procedure_tenure(114);


mysql> call procedure_tenure(114);
ERROR 1054 (42S22): Unknown column 'e.employee_id' in 'field list'
mysql> delimiter #
mysql> drop procedure if exists procedure_tenure;
    -> create procedure procedure_tenure(p_employee_id int)
    -> begin
    ->  select employee_id "Employee ID",concat(first_name,' ',last_name) "Name",hire_date "HireDate", floor(datediff(curdate(),hire_date)/365) "Tenure" from employees where employee_id = p_employee_id;
    -> end #
Query OK, 0 rows affected (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql> call procedure_tenure(114);
+-------------+--------------+------------+--------+
| Employee ID | Name         | HireDate   | Tenure |
+-------------+--------------+------------+--------+
|         114 | Den Raphaely | 1994-12-07 |     30 |
+-------------+--------------+------------+--------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_tenure(154);
+-------------+-------------------+------------+--------+
| Employee ID | Name              | HireDate   | Tenure |
+-------------+-------------------+------------+--------+
|         154 | Nanette Cambrault | 1998-12-09 |     26 |
+-------------+-------------------+------------+--------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_tenure(100);
+-------------+-------------+------------+--------+
| Employee ID | Name        | HireDate   | Tenure |
+-------------+-------------+------------+--------+
|         100 | Steven King | 1987-06-17 |     37 |
+-------------+-------------+------------+--------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_tenure(99);
Empty set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)



8. Department Budget Summary
Objective: Create a stored procedure that calculates and returns the total salary expense for a department.
Input: p_department_id IN NUMBER
Output: Total salary expense for the department.
Business Logic: The procedure should sum the salaries of all employees in the given department and return the total salary expense.


delimiter #
drop procedure if exists procedure_budget;
create procedure procedure_budget(p_department_id int, out total_salary_expence int)
begin
	select sum(salary) into total_salary_expence from employees where department_id = p_department_id;
end #
delimiter ;

call procedure_budget(70,@p);

mysql> delimiter #
mysql> drop procedure if exists procedure_budget;
    -> create procedure procedure_budget(p_department_id int, out total_salary_expence int)
    -> begin
    ->  select sum(salary) into total_salary_expence from employees where department_id = p_department_id;
    -> end #
Query OK, 0 rows affected, 1 warning (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> call procedure_budget(70,@p);
Query OK, 1 row affected (0.00 sec)

mysql> select @p;
+-------+
| @p    |
+-------+
| 10000 |
+-------+
1 row in set (0.00 sec)

mysql> call procedure_budget(110,@p);
Query OK, 1 row affected (0.00 sec)

mysql> select @p;
+-------+
| @p    |
+-------+
| 20300 |
+-------+
1 row in set (0.00 sec)




9. Find Employees with No Manager
Objective: Create a stored procedure that identifies employees who do not have a manager assigned.
Input: None
Output: List of employees without a manager (Employee ID, Name, Job Title).
Business Logic: The procedure should return a list of employees whose manager_id is NULL.

delimiter #
drop procedure if exists procedure_nomanager;
create procedure procedure_nomanager()
begin
	select e.employee_id"Employee ID", concat(first_name,' ',last_name)"Name", j.job_title"Job Title" from employees e join jobs j on e.job_id=j.job_id and e.manager_id is null;
end #
delimiter ;

call procedure_nomanager;

mysql> delimiter #
mysql> drop procedure if exists procedure_nomanager;
    -> create procedure procedure_nomanager()
    -> begin
    ->  select e.employee_id"Employee ID", concat(first_name,' ',last_name)"Name", j.job_title"Job Title" from employees e join jobs j on e.job_id=j.job_id and e.manager_id is null;
    -> end #
Query OK, 0 rows affected, 1 warning (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql> call procedure_nomanager;
+-------------+-------------+-----------+
| Employee ID | Name        | Job Title |
+-------------+-------------+-----------+
|         100 | Steven King | President |
+-------------+-------------+-----------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)



10. Employee Turnover Rate
Objective: Create a stored procedure that calculates the turnover rate for a department within a given period.
Input: p_department_id IN NUMBER, p_start_date IN DATE, p_end_date IN DATE
Output: Turnover rate as a percentage of the total number of employees in that department who left during the specified period.
Business Logic: The procedure should calculate the number of employees who left the department within the given date range and divide by the total number of employees in the department during that period.


delimiter #
drop procedure if exists procedure_Turnover_Rate;
create procedure procedure_Turnover_Rate(p_department_id int, p_start_date DATE, p_end_date DATE)
begin
	declare totalemp int;
	declare leftemp int;	
	
	set totalemp = (select count(*) from employees where hire_date<p_end_date and department_id = p_department_id);
	
	set totalemp = totalemp + (select count(*) from job_history where start_date > p_start_date and start_date<p_end_date and department_id = p_department_id);
	
	set leftemp = (select count(*) from job_history where start_date > p_start_date and end_date < p_end_date and department_id = p_department_id);
	
	select leftemp/totalemp*100;
	
end #
delimiter ;

call procedure_Turnover_Rate(110,'1989-03-20','1999-03-24');


mysql> delimiter #
mysql> drop procedure if exists procedure_Turnover_Rate;
    -> create procedure procedure_Turnover_Rate(p_department_id int, p_start_date DATE, p_end_date DATE)
    -> begin
    ->  declare totalemp int;
    ->  declare leftemp int;
    ->
    ->  set totalemp = (select count(*) from employees where hire_date<p_end_date and department_id = p_department_id);
    ->
    ->  set totalemp = totalemp + (select count(*) from job_history where start_date > p_start_date and start_date<p_end_date and department_id = p_department_id);
    ->
    ->  set leftemp = (select count(*) from job_history where start_date > p_start_date and end_date < p_end_date and department_id = p_department_id);
    ->
    ->  select leftemp/totalemp*100;
    ->
    -> end #
Query OK, 0 rows affected (0.01 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql>
mysql> call procedure_Turnover_Rate(110,'1989-03-20','1999-03-24');
+----------------------+
| leftemp/totalemp*100 |
+----------------------+
|              50.0000 |
+----------------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

mysql> call procedure_Turnover_Rate(80,'1982-03-20','1999-03-24');
+----------------------+
| leftemp/totalemp*100 |
+----------------------+
|               3.8462 |
+----------------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_Turnover_Rate(50,'1982-03-20','1999-03-24');
+----------------------+
| leftemp/totalemp*100 |
+----------------------+
|               0.0000 |
+----------------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

mysql> call procedure_Turnover_Rate(90,'1982-03-20','1999-03-24');
+----------------------+
| leftemp/totalemp*100 |
+----------------------+
|              40.0000 |
+----------------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.00 sec)


----------------------------- Function -----------------------
1. Problem: "The finance department needs to calculate the average salary for each department to analyze salary distribution and budget planning."

Function: GetAverageDepartmentSalary(dept_id INT)

delimiter #
create function GetAverageDepartmentSalary(dept_id INT) returns decimal(8,2)
begin
	declare x decimal(8,2) default 0.00;
	set x = (select avg(salary) from employees where department_id = dept_id);
	return x;
end #
delimiter ;

select department_id, department_name, GetAverageDepartmentSalary(department_id)"Average Salary" from departments;

mysql> select avg(salary) from employees where department_id = 20^C
mysql> delimiter #
mysql> create function GetAverageDepartmentSalary(dept_id INT) returns decimal(8,2)
    -> begin
    ->  declare x decimal(8,2) default 0.00;
    ->  set x = (select avg(salary) from employees where department_id = dept_id);
    ->  return x;
    -> end #
Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> select department_id, department_name, GetAverageDepartmentSalary(department_id)"Average Salary" from departments;
+---------------+----------------------+----------------+
| department_id | department_name      | Average Salary |
+---------------+----------------------+----------------+
|            10 | Administration       |        4400.00 |
|            20 | Marketing            |        9500.00 |
|            30 | Purchasing           |        4150.00 |
|            40 | Human Resources      |        6500.00 |
|            50 | Shipping             |        3475.56 |
|            60 | IT                   |        5760.00 |
|            70 | Public Relations     |       10000.00 |
|            80 | Sales                |        8955.88 |
|            90 | Executive            |       19333.33 |
|           100 | Finance              |        8600.00 |
|           110 | Accounting           |       10150.00 |
|           120 | Treasury             |           NULL |
|           130 | Corporate Tax        |           NULL |
|           140 | Control And Credit   |           NULL |
|           150 | Shareholder Services |           NULL |
|           160 | Benefits             |           NULL |
|           170 | Manufacturing        |           NULL |
|           180 | Construction         |           NULL |
|           190 | Contracting          |           NULL |
|           200 | Operations           |           NULL |
|           210 | IT Support           |           NULL |
|           220 | NOC                  |           NULL |
|           230 | IT Helpdesk          |           NULL |
|           240 | Government Sales     |           NULL |
|           250 | Retail Sales         |           NULL |
|           260 | Recruiting           |           NULL |
|           270 | Payroll              |           NULL |
+---------------+----------------------+----------------+
27 rows in set (0.00 sec)


2. Problem: "As an HR analyst, I need to quickly retrieve the full name of an employee given their employee ID for reporting purposes."

Function: GetEmployeeFullName(emp_id INT)

delimiter #
create function GetEmployeeFullName(emp_id INT) returns varchar(30)
begin
	declare fullname varchar(30);
	set fullname = (select concat(first_name,' ',last_name) from employees where employee_id=emp_id);
	return fullname;
end #
delimiter ;

select GetEmployeeFullName(employee_id) from employees;

mysql> delimiter #
mysql> create function GetEmployeeFullName(emp_id INT) returns varchar(30)
    -> begin
    ->  declare fullname varchar(30);
    ->  set fullname = (select concat(first_name,' ',last_name) from employees where employee_id=emp_id);
    ->  return fullname;
    -> end #
Query OK, 0 rows affected (0.00 sec)

mysql> delimiter ;
mysql> select GetEmployeeFullName(employee_id) from employees;
+----------------------------------+
| GetEmployeeFullName(employee_id) |
+----------------------------------+
| Kimberely Grant                  |
| Jennifer Whalen                  |
| Michael Hartstein                |
| Pat Fay                          |
| Den Raphaely                     |
| Alexander Khoo                   |
| Shelli Baida                     |
| Sigal Tobias                     |
| Guy Himuro                       |
| Karen Colmenares                 |
| Susan Mavris                     |
| Matthew Weiss                    |
| Adam Fripp                       |
| Payam Kaufling                   |
| Shanta Vollman                   |
| Kevin Mourgos                    |
| Julia Nayer                      |
| Irene Mikkilineni                |
| James Landry                     |
| Steven Markle                    |
| Laura Bissot                     |
| Mozhe Atkinson                   |
| James Marlow                     |
| TJ Olson                         |
| Jason Mallin                     |
| Michael Rogers                   |
| Ki Gee                           |
| Hazel Philtanker                 |
| Renske Ladwig                    |
| Stephen Stiles                   |
| John Seo                         |
| Joshua Patel                     |
| Trenna Rajs                      |
| Curtis Davies                    |
| Randall Matos                    |
| Peter Vargas                     |
| Winston Taylor                   |
| Jean Fleaur                      |
| Martha Sullivan                  |
| Girard Geoni                     |
| Nandita Sarchand                 |
| Alexis Bull                      |
| Julia Dellinger                  |
| Anthony Cabrio                   |
| Kelly Chung                      |
| Jennifer Dilly                   |
| Timothy Gates                    |
| Randall Perkins                  |
| Sarah Bell                       |
| Britney Everett                  |
| Samuel McCain                    |
| Vance Jones                      |
| Alana Walsh                      |
| Kevin Feeney                     |
| Donald OConnell                  |
| Douglas Grant                    |
| Alexander Hunold                 |
| Bruce Ernst                      |
| David Austin                     |
| Valli Pataballa                  |
| Diana Lorentz                    |
| Hermann Baer                     |
| John Russell                     |
| Karen Partners                   |
| Alberto Errazuriz                |
| Gerald Cambrault                 |
| Eleni Zlotkey                    |
| Peter Tucker                     |
| David Bernstein                  |
| Peter Hall                       |
| Christopher Olsen                |
| Nanette Cambrault                |
| Oliver Tuvault                   |
| Janette King                     |
| Patrick Sully                    |
| Allan McEwen                     |
| Lindsey Smith                    |
| Louise Doran                     |
| Sarath Sewall                    |
| Clara Vishney                    |
| Danielle Greene                  |
| Mattea Marvins                   |
| David Lee                        |
| Sundar Ande                      |
| Amit Banda                       |
| Lisa Ozer                        |
| Harrison Bloom                   |
| Tayler Fox                       |
| William Smith                    |
| Elizabeth Bates                  |
| Sundita Kumar                    |
| Ellen Abel                       |
| Alyssa Hutton                    |
| Jonathon Taylor                  |
| Jack Livingston                  |
| Charles Johnson                  |
| Steven King                      |
| Neena Kochhar                    |
| Lex De Haan                      |
| Nancy Greenberg                  |
| Daniel Faviet                    |
| John Chen                        |
| Ismael Sciarra                   |
| Jose Manuel Urman                |
| Luis Popp                        |
| Shelley Higgins                  |
| William Gietz                    |
+----------------------------------+
107 rows in set (0.00 sec)

3.Problem: "When reviewing employee information, I need to know the department name an employee belongs to, given their employee ID."

Function: GetEmployeeDepartmentName(emp_id INT)

delimiter #
create function GetEmployeeDepartmentName(emp_id INT) returns varchar(30)
begin
	declare deptname varchar(30);
	set deptname = (select d.department_name from employees e join departments d on e.department_id=d.department_id and e.employee_id=emp_id);
	return deptname;
end #
delimiter ;

select first_name,GetEmployeeDepartmentName(employee_id) from employees;

mysql> delimiter #
mysql> create function GetEmployeeDepartmentName(emp_id INT) returns varchar(30)
    -> begin
    ->  declare deptname varchar(30);
    ->  set deptname = (select d.department_name from employees e join departments d on e.department_id=d.department_id and e.employee_id=emp_id);
    ->  return deptname;
    -> end #
Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> select first_name,GetEmployeeDepartmentName(employee_id) from employees;
+-------------+----------------------------------------+
| first_name  | GetEmployeeDepartmentName(employee_id) |
+-------------+----------------------------------------+
| Steven      | Executive                              |
| Neena       | Executive                              |
| Lex         | Executive                              |
| Alexander   | IT                                     |
| Bruce       | IT                                     |
| David       | IT                                     |
| Valli       | IT                                     |
| Diana       | IT                                     |
| Nancy       | Finance                                |
| Daniel      | Finance                                |
| John        | Finance                                |
| Ismael      | Finance                                |
| Jose Manuel | Finance                                |
| Luis        | Finance                                |
| Den         | Purchasing                             |
| Alexander   | Purchasing                             |
| Shelli      | Purchasing                             |
| Sigal       | Purchasing                             |
| Guy         | Purchasing                             |
| Karen       | Purchasing                             |
| Matthew     | Shipping                               |
| Adam        | Shipping                               |
| Payam       | Shipping                               |
| Shanta      | Shipping                               |
| Kevin       | Shipping                               |
| Julia       | Shipping                               |
| Irene       | Shipping                               |
| James       | Shipping                               |
| Steven      | Shipping                               |
| Laura       | Shipping                               |
| Mozhe       | Shipping                               |
| James       | Shipping                               |
| TJ          | Shipping                               |
| Jason       | Shipping                               |
| Michael     | Shipping                               |
| Ki          | Shipping                               |
| Hazel       | Shipping                               |
| Renske      | Shipping                               |
| Stephen     | Shipping                               |
| John        | Shipping                               |
| Joshua      | Shipping                               |
| Trenna      | Shipping                               |
| Curtis      | Shipping                               |
| Randall     | Shipping                               |
| Peter       | Shipping                               |
| John        | Sales                                  |
| Karen       | Sales                                  |
| Alberto     | Sales                                  |
| Gerald      | Sales                                  |
| Eleni       | Sales                                  |
| Peter       | Sales                                  |
| David       | Sales                                  |
| Peter       | Sales                                  |
| Christopher | Sales                                  |
| Nanette     | Sales                                  |
| Oliver      | Sales                                  |
| Janette     | Sales                                  |
| Patrick     | Sales                                  |
| Allan       | Sales                                  |
| Lindsey     | Sales                                  |
| Louise      | Sales                                  |
| Sarath      | Sales                                  |
| Clara       | Sales                                  |
| Danielle    | Sales                                  |
| Mattea      | Sales                                  |
| David       | Sales                                  |
| Sundar      | Sales                                  |
| Amit        | Sales                                  |
| Lisa        | Sales                                  |
| Harrison    | Sales                                  |
| Tayler      | Sales                                  |
| William     | Sales                                  |
| Elizabeth   | Sales                                  |
| Sundita     | Sales                                  |
| Ellen       | Sales                                  |
| Alyssa      | Sales                                  |
| Jonathon    | Sales                                  |
| Jack        | Sales                                  |
| Kimberely   | NULL                                   |
| Charles     | Sales                                  |
| Winston     | Shipping                               |
| Jean        | Shipping                               |
| Martha      | Shipping                               |
| Girard      | Shipping                               |
| Nandita     | Shipping                               |
| Alexis      | Shipping                               |
| Julia       | Shipping                               |
| Anthony     | Shipping                               |
| Kelly       | Shipping                               |
| Jennifer    | Shipping                               |
| Timothy     | Shipping                               |
| Randall     | Shipping                               |
| Sarah       | Shipping                               |
| Britney     | Shipping                               |
| Samuel      | Shipping                               |
| Vance       | Shipping                               |
| Alana       | Shipping                               |
| Kevin       | Shipping                               |
| Donald      | Shipping                               |
| Douglas     | Shipping                               |
| Jennifer    | Administration                         |
| Michael     | Marketing                              |
| Pat         | Marketing                              |
| Susan       | Human Resources                        |
| Hermann     | Public Relations                       |
| Shelley     | Accounting                             |
| William     | Accounting                             |
+-------------+----------------------------------------+
107 rows in set (0.01 sec)

4.Problem: "The HR department requires a count of employees in each department for workforce planning and resource allocation."

Function: CountEmployeesInDepartment(dept_id INT)


delimiter #
create function CountEmployeesInDepartment(dept_id INT) returns int
begin
	declare empcount int;
	set empcount = (select count(*) from employees where department_id = dept_id);
	return empcount;
end #
delimiter ;

select department_id, department_name, CountEmployeesInDepartment(department_id)"Count Salary" from departments;


mysql> delimiter #
mysql> create function CountEmployeesInDepartment(dept_id INT) returns int
    -> begin
    ->  declare empcount int;
    ->  set empcount = (select count(*) from employees where department_id = dept_id);
    ->  return empcount;
    -> end #
Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;

mysql> select department_id, department_name, CountEmployeesInDepartment(department_id)"Count Salary" from departments;
+---------------+----------------------+--------------+
| department_id | department_name      | Count Salary |
+---------------+----------------------+--------------+
|            10 | Administration       |            1 |
|            20 | Marketing            |            2 |
|            30 | Purchasing           |            6 |
|            40 | Human Resources      |            1 |
|            50 | Shipping             |           45 |
|            60 | IT                   |            5 |
|            70 | Public Relations     |            1 |
|            80 | Sales                |           34 |
|            90 | Executive            |            3 |
|           100 | Finance              |            6 |
|           110 | Accounting           |            2 |
|           120 | Treasury             |            0 |
|           130 | Corporate Tax        |            0 |
|           140 | Control And Credit   |            0 |
|           150 | Shareholder Services |            0 |
|           160 | Benefits             |            0 |
|           170 | Manufacturing        |            0 |
|           180 | Construction         |            0 |
|           190 | Contracting          |            0 |
|           200 | Operations           |            0 |
|           210 | IT Support           |            0 |
|           220 | NOC                  |            0 |
|           230 | IT Helpdesk          |            0 |
|           240 | Government Sales     |            0 |
|           250 | Retail Sales         |            0 |
|           260 | Recruiting           |            0 |
|           270 | Payroll              |            0 |
+---------------+----------------------+--------------+
27 rows in set (0.00 sec)




5.Problem: "The HR department needs to know the highest salary within each department for salary benchmarking and to identify potential pay disparities."

Function: GetHighestSalaryInDepartment(dept_id INT)
 

delimiter #
create function GetHighestSalaryInDepartment(dept_id INT) returns int
begin
	declare maxsal int;
	set maxsal = (select max(salary) from employees where department_id = dept_id);
	return maxsal;
end #
delimiter ;

select department_id, department_name, GetHighestSalaryInDepartment(department_id)"Maximum Salary" from departments;


mysql> delimiter #
mysql> create function GetHighestSalaryInDepartment(dept_id INT) returns int
    -> begin
    ->  declare maxsal int;
    ->  set maxsal = (select max(salary) from employees where department_id = dept_id);
    ->  return maxsal;
    -> end #
Query OK, 0 rows affected (0.01 sec)

mysql> delimiter ;
mysql> select department_id, department_name, GetHighestSalaryInDepartment(department_id)"Maximum Salary" from departments;
+---------------+----------------------+----------------+
| department_id | department_name      | Maximum Salary |
+---------------+----------------------+----------------+
|            10 | Administration       |           4400 |
|            20 | Marketing            |          13000 |
|            30 | Purchasing           |          11000 |
|            40 | Human Resources      |           6500 |
|            50 | Shipping             |           8200 |
|            60 | IT                   |           9000 |
|            70 | Public Relations     |          10000 |
|            80 | Sales                |          14000 |
|            90 | Executive            |          24000 |
|           100 | Finance              |          12000 |
|           110 | Accounting           |          12000 |
|           120 | Treasury             |           NULL |
|           130 | Corporate Tax        |           NULL |
|           140 | Control And Credit   |           NULL |
|           150 | Shareholder Services |           NULL |
|           160 | Benefits             |           NULL |
|           170 | Manufacturing        |           NULL |
|           180 | Construction         |           NULL |
|           190 | Contracting          |           NULL |
|           200 | Operations           |           NULL |
|           210 | IT Support           |           NULL |
|           220 | NOC                  |           NULL |
|           230 | IT Helpdesk          |           NULL |
|           240 | Government Sales     |           NULL |
|           250 | Retail Sales         |           NULL |
|           260 | Recruiting           |           NULL |
|           270 | Payroll              |           NULL |
+---------------+----------------------+----------------+
27 rows in set (0.00 sec)









