package com.cdac.acts.tester;

import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

import com.cdac.acts.fruit.Apple;
import com.cdac.acts.util.DateUtil;

public class AppleTest {

	public static void main(String[] args) {
		List<Apple> apples = DateUtil.appleList();
		int op;
		try(Scanner sc = new Scanner(System.in)){
			do {
				System.out.print("1.     Filter by weight\r\n"
						+ "2.     filter by color\r\n"
						+ "3.     filter by color and weight\r\n"
						+ "4.     filter by color, weight and taste\r\n"
						+ "5.     Sort by weight\r\n"
						+ "6.     Sort by color\r\n"
						+ "7.     Remove red apples\r\n"
						+ "8.     Removed Green apples\r\n"
						+ "9.     Convert to Set collection"
						+ "0.     EXIT\n\n"
						+ "Enter Your Choice : ");
				op = sc.nextInt();
				switch(op) {
					case 1: {
						System.out.println("________Filter by weight________");
						System.out.print("Enter Weight : ");
						Double weight = sc.nextDouble();
						apples
						.stream()
						.filter((apple)->apple.getWeight().equals(weight))
						.forEach(System.out::println);
						
						break;
					}
					case 2: {
						System.out.println("________Filter by Color________");
						System.out.print("Enter Color : ");
						String color = sc.next();
						apples
						.stream()
						.filter((apple)->apple.getColor().equals(color))
						.forEach(System.out::println);
						
						break;
					}
					case 3: {
						System.out.println("________Filter by color and weight________");
						System.out.print("Enter Weight : ");
						Double weight = sc.nextDouble();
						System.out.print("Enter Color : ");
						String color = sc.next();
						apples
						.stream()
						.filter((apple)->apple.getColor().equals(color)&&apple.getWeight().equals(weight))
						.forEach(System.out::println);
						break;
					}
					case 4: {
						System.out.println("________Filter by color and weight and taste________");
						System.out.print("Enter Weight : ");
						Double weight = sc.nextDouble();
						System.out.print("Enter Color : ");
						String color = sc.next();
						System.out.print("Enter Taste : ");
						String taste = sc.next();
						apples
						.stream()
						.filter((apple)->apple.getColor().equals(color)&&apple.getWeight().equals(weight)&&apple.getTaste().equals(taste))
						.forEach(System.out::println);
						break;
					}
					case 5: {
						System.out.println("________Sort by weight________");
						apples = 	apples
								.stream()
								.sorted((a,b) -> a.getWeight().compareTo(b.getWeight()))
								.collect(Collectors.toList());
						apples.forEach(System.out::println);
						break;
					}
					case 6: {
						System.out.println("________Sort by Color________");
						apples = 	apples
								.stream()
								.sorted((a,b) -> a.getColor().compareTo(b.getColor()))
								.collect(Collectors.toList());
						apples.forEach(System.out::println);
						break;
					}
					case 7: {
						System.out.println("________Remove Red Apples________");
						apples = apples
								.stream()
								.filter((apple)->!apple.getColor().equals("red"))
								.collect(Collectors.toList());
						apples.forEach(System.out::println);
						break;
					}
					case 8: {
						System.out.println("________Remove Green Apples________");
						apples = apples
								.stream()
								.filter((apple)->!apple.getColor().equals("green"))
								.collect(Collectors.toList());
						apples.forEach(System.out::println);
						break;
					}
					case 9: {
						System.out.println("________Convert to Set collection________");
						Set<Apple> appleSet = apples
											.stream()
											.collect(Collectors.toSet());
						appleSet.forEach(System.out::println);
						break;
					}
					case 0: break;
					default: System.out.println("INVALID INPUT");
				}
			}while(op!=0);
		}
		
	}

}
